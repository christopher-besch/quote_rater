{"version":3,"file":"component---src-pages-index-tsx-017001409ea3f073e562.js","mappings":"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","sources":["webpack://quote_rater/./src/styles/home.module.scss","webpack://quote_rater/./src/utils/quotes.ts","webpack://quote_rater/./src/pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var card = \"home-module--card--f-c4b\";\nexport var cards = \"home-module--cards--s7NCE\";","const quote_regex = /### +(.*)\\n```\\n((?:.|\\n)*?)\\n—(.*)\\n```\\n((?:- +.+\\n)*)/gm;\n\nexport type Quote = {\n    origin: string;\n    text: string;\n    author: string;\n    comments: string;\n};\n\nexport class QuotesHandler {\n    private url: string = \"\";\n    private should_render: boolean = true;\n    private quotes: Quote[] = [];\n    private quotes_order: number[] = [];\n\n    private adj: number[][] = [];\n    private link: number[] = [];\n    private size: number[] = [];\n    private left_idx: number = -1;\n    private right_idx: number = -1;\n    private components_amount: number = 0;\n\n    constructor(url: string = \"\", callback: { (): void } = () => { }) {\n        if (url == \"\") {\n            this.should_render = false;\n            return;\n        }\n        this.url = url;\n        this.dwn(url, (response) => {\n            let match;\n            while (match = quote_regex.exec(response)) {\n                this.quotes.push({ origin: match[1], text: match[2], author: match[3], comments: match[4] });\n            }\n            this.setup();\n            this.top_sort();\n            this.next_question();\n            callback();\n        });\n    }\n\n    public get_should_render(): boolean {\n        return this.should_render;\n    }\n\n    public next_question(): void {\n        // terribly inefficient, too bad\n        do {\n            this.left_idx = Math.floor(Math.random() * this.quotes.length);\n            this.right_idx = Math.floor(Math.random() * this.quotes.length);\n        } while (this.same(this.left_idx, this.right_idx))\n        console.log(`using quotes ${this.left_idx} and ${this.right_idx}`);\n    }\n\n    public get_quotes_string(): string {\n        let out: string = \"\";\n        for (let idx of this.quotes_order) {\n            let quote = this.quotes[idx];\n            out += `### ${quote.origin}\\n\\`\\`\\`\\n${quote.text}\\n—${quote.author}\\n\\`\\`\\`\\n${quote.comments}\\n`;\n        }\n        return out;\n    }\n\n    // to be executed from react\n    // because apparently this garbage requires multi-threaded-level of fuckery\n    public get_left_quote(): Quote {\n        console.log(this.left_idx);\n        return this.quotes[this.left_idx];\n    }\n    public get_right_quote(): Quote {\n        return this.quotes[this.right_idx];\n    }\n\n    public get_quotes_amount(): number {\n        return this.quotes.length;\n    }\n\n    public get_components_amount(): number {\n        return this.components_amount;\n    }\n\n    private dwn(url: string, callback: { (response: string): void }): void {\n        let request = new XMLHttpRequest();\n        request.onload = () => {\n            if (request.status == 200)\n                callback(request.responseText);\n            else {\n                console.error(`Failed to load '${url}' with status ${request.status}`);\n            }\n        };\n        request.onerror = () => {\n            console.error(`Failed to load '${url}'`);\n        };\n        request.open(\"GET\", url, true);\n        request.send();\n    }\n\n    private setup(): void {\n        for (let i = 0; i < this.quotes.length; ++i) {\n            this.adj.push([]);\n            this.link[i] = i;\n            this.size[i] = 1;\n        }\n        this.components_amount = this.quotes.length;\n    }\n    private find(x: number): number {\n        while (x != this.link[x])\n            x = this.link[x];\n        return x;\n    }\n    private same(a: number, b: number): boolean {\n        return this.find(a) == this.find(b);\n    }\n    // don't use with nodes from same component\n    private unite(a: number, b: number): void {\n        a = this.find(a);\n        b = this.find(b);\n        if (this.size[a] < this.size[b])\n            [a, b] = [b, a];\n        this.size[a] += this.size[b];\n        this.link[b] = a;\n        --this.components_amount;\n    }\n\n    private top_sort(): void {\n        this.quotes_order = [];\n        let status: number[] = [];\n        for (let i = 0; i < this.quotes.length; ++i)\n            status.push(0);\n        for (let i = 0; i < this.quotes.length; ++i)\n            this.top(i, status);\n    }\n    private top(cur: number, status: number[]) {\n        if (status[cur] == 2)\n            return;\n        status[cur] = 1;\n\n        for (let next of this.adj[cur])\n            this.top(next, status);\n\n        this.quotes_order.push(cur);\n        status[cur] = 2;\n    }\n\n};\n","import React, { useState, useEffect } from \"react\";\n\nimport Layout from \"src/components/layout\";\nimport * as styles from \"src/styles/home.module.scss\";\nimport Heading from \"src/components/heading\";\nimport { Quote, QuotesHandler } from \"src/utils/quotes\";\n\nconst Home: React.FC = (props) => {\n    let [quotes_handler, set_quotes_handler] = useState<QuotesHandler>(new QuotesHandler());\n\n    // run for each refresh\n    useEffect(() => {\n        let url_search_params = new URLSearchParams(location.search);\n        let quotes_url_raw = url_search_params.get(\"quotes_url\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLButtonElement;\n        if (quotes_url_input.value == \"\")\n            quotes_url_input.value = quotes_url_raw ? quotes_url_raw : \"\";\n    });\n\n    function load() {\n        let url_search_params = new URLSearchParams(location.search);\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLButtonElement;\n        let quotes_url = quotes_url_input.value;\n        url_search_params.set(\"quotes_url\", quotes_url);\n        window.history.replaceState({}, \"\", `${location.pathname}?${url_search_params.toString()}`);\n        let new_quotes_handler = new QuotesHandler(quotes_url, () => {\n            set_quotes_handler(new_quotes_handler);\n        });\n    }\n\n    function left_better() {\n        set_quotes_handler((quotes_handler) => {\n            quotes_handler\n\n            quotes_handler.next_question();\n            return quotes_handler;\n        });\n    }\n    function equal() {\n        set_quotes_handler((quotes_handler) => {\n            quotes_handler.next_question();\n            return quotes_handler;\n        });\n    }\n    function right_better() {\n        set_quotes_handler((quotes_handler) => {\n\n            quotes_handler.next_question();\n            return quotes_handler;\n        });\n    }\n\n    return (\n        <Layout>\n            <Heading heading=\"Quote Rater\" />\n            <label htmlFor=\"quotes_url_input\">Input Quotes URL: </label>\n            <input id=\"quotes_url_input\" type=\"text\"></input><br />\n            <button onClick={load}>Load</button>\n            <p>{quotes_handler.get_quotes_amount()}</p>\n\n            {quotes_handler.get_should_render() && (\n                <div>\n                    <p>quotes: {quotes_handler.get_quotes_amount()}</p>\n                    <p>components: {quotes_handler.get_components_amount()}</p>\n                    <div className={styles.cards}>\n                        <div className={styles.card}>\n                            <pre><code>\n                                {quotes_handler.get_left_quote().text}\n                            </code></pre>\n                        </div>\n                        <div className={styles.card}>\n                            <pre><code>\n                                {quotes_handler.get_right_quote().text}\n                            </code></pre>\n                        </div>\n                    </div>\n                    <button onClick={left_better}>Left Better</button>\n                    <button onClick={equal}>Roughly Equal</button>\n                    <button onClick={right_better}>Right Better</button>\n                    <h1>Ordered Quotes:</h1>\n                    <pre><code>\n                        {quotes_handler.get_quotes_string()}\n                    </code></pre>\n                </div>\n            )}\n        </Layout >\n    );\n};\nexport default Home;\n"],"names":["card","quote_regex","QuotesHandler","url","callback","should_render","quotes","quotes_order","adj","link","size","left_idx","right_idx","components_amount","this","dwn","response","match","exec","push","origin","text","author","comments","setup","top_sort","next_question","get_should_render","Math","floor","random","length","same","console","log","get_quotes_string","out","idx","quote","get_left_quote","get_right_quote","get_quotes_amount","get_components_amount","request","XMLHttpRequest","onload","status","responseText","error","onerror","open","send","i","find","x","a","b","unite","top","cur","next","props","useState","quotes_handler","set_quotes_handler","useEffect","quotes_url_raw","URLSearchParams","location","search","get","quotes_url_input","document","getElementById","value","heading","htmlFor","id","type","onClick","url_search_params","quotes_url","set","window","history","replaceState","pathname","toString","new_quotes_handler","className","styles"],"sourceRoot":""}