"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScriptSourceHelper = void 0;
const typescript_1 = __importDefault(require("typescript"));
const utilily_functions_1 = require("./utilily-functions");
const template_expression_resolver_1 = require("./template-expression-resolver");
function createScriptSourceHelper({ languageService, languageServiceHost, }) {
    const getSourceFile = (fileName) => {
        const program = languageService.getProgram();
        if (!program) {
            throw new Error('language service host does not have program!');
        }
        const s = program.getSourceFile(fileName);
        if (!s) {
            throw new Error('No source file: ' + fileName);
        }
        return s;
    };
    const getNode = (fileName, position) => {
        return (0, utilily_functions_1.findNode)(getSourceFile(fileName), position);
    };
    const getAllNodes = (fileName, cond) => {
        const s = getSourceFile(fileName);
        return (0, utilily_functions_1.findAllNodes)(s, cond);
    };
    const getLineAndChar = (fileName, position) => {
        const s = getSourceFile(fileName);
        return typescript_1.default.getLineAndCharacterOfPosition(s, position);
    };
    const resolver = new template_expression_resolver_1.TemplateExpressionResolver(languageService, (fileName) => languageServiceHost.getScriptVersion(fileName));
    const resolveTemplateLiteral = resolver.resolve.bind(resolver);
    const updateTemplateLiteralInfo = resolver.update.bind(resolver);
    return {
        getNode,
        getAllNodes,
        getLineAndChar,
        resolveTemplateLiteral,
        updateTemplateLiteralInfo,
    };
}
exports.createScriptSourceHelper = createScriptSourceHelper;
//# sourceMappingURL=script-source-helper.js.map