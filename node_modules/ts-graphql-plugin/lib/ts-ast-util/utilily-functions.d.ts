import ts from 'typescript';
export declare type TagCondition = string;
export declare function findNode(sourceFile: ts.SourceFile, position: number): ts.Node | undefined;
export declare function findAllNodes(sourceFile: ts.SourceFile, cond: (n: ts.Node) => boolean): ts.Node[];
export declare function hasTagged(node: ts.Node | undefined, condition: TagCondition): boolean | undefined;
export declare function isTagged(node: ts.Node | undefined, condition: TagCondition): boolean | undefined;
export declare function isTemplateLiteralTypeNode(node: ts.Node): node is ts.TemplateLiteralTypeNode;
export declare function isImportDeclarationWithCondition(node: ts.Node, { isDefault, name, from }: {
    isDefault?: boolean;
    name?: string;
    from?: string;
}): boolean;
export declare function mergeImportDeclarationsWithSameModules(base: ts.ImportDeclaration, head: ts.ImportDeclaration): ts.ImportDeclaration;
export declare function removeAliasFromImportDeclaration(base: ts.ImportDeclaration, name: string): ts.ImportDeclaration | undefined;
export declare function isTsVersionLaterThanOrEqualTo(major: number, minor: number): boolean;
/**
 * Typescript 4.5 adds an `isTypeOnly` argument as the first argument to
 * `ts.createImportSpecifier`. To avoid breaking compatibility with earlier
 * Typescript versions this helper checks the Typescript version to decide which
 * set of arguments to pass along.
 */
export declare const createImportSpecifier: typeof ts.createImportSpecifier;
