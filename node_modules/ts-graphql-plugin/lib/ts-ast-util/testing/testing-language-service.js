"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTestingLanguageService = exports.createTestingLanguageServiceAndHost = exports.TestingLanguageServiceHost = void 0;
const typescript_1 = __importDefault(require("typescript"));
const path_1 = __importDefault(require("path"));
const script_host_1 = require("../script-host");
class TestingLanguageServiceHost extends script_host_1.ScriptHost {
    constructor(options) {
        super(path_1.default.resolve(__dirname, '../../'), typescript_1.default.getDefaultCompilerOptions());
        (options.files || []).forEach(({ fileName, content }) => this._updateFile(fileName, content));
    }
    getFile(fileName) {
        const content = this.readFile(fileName);
        if (!content)
            return undefined;
        return { fileName, content };
    }
    loadFromFileSystem(_fileName) {
        return undefined;
    }
    updateFile(fileName, content) {
        this._updateFile(fileName, content);
    }
}
exports.TestingLanguageServiceHost = TestingLanguageServiceHost;
function createTestingLanguageServiceAndHost(options) {
    const host = new TestingLanguageServiceHost(options);
    return {
        languageService: typescript_1.default.createLanguageService(host),
        languageServiceHost: host,
    };
}
exports.createTestingLanguageServiceAndHost = createTestingLanguageServiceAndHost;
function createTestingLanguageService(options) {
    return createTestingLanguageServiceAndHost(options).languageService;
}
exports.createTestingLanguageService = createTestingLanguageService;
//# sourceMappingURL=testing-language-service.js.map