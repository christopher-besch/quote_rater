"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOutputSource = exports.DefaultOutputSource = void 0;
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const utilily_functions_1 = require("./utilily-functions");
const printer = typescript_1.default.createPrinter();
/**
 *
 * @internal
 *
 */
class DefaultOutputSource {
    constructor(_filename) {
        this._filename = _filename;
        this._unmergedComment = [];
        this._statements = [];
    }
    get outputFileName() {
        return this._filename;
    }
    get outputDirName() {
        return path_1.default.dirname(this._filename);
    }
    findImportDeclarationIndex({ isDefault, name, from }) {
        return this._statements.findIndex(st => (0, utilily_functions_1.isImportDeclarationWithCondition)(st, { isDefault, name, from }));
    }
    pushNamedImportIfNeeded(identifierName, from) {
        if (this.findImportDeclarationIndex({ name: identifierName, from }) !== -1)
            return false;
        const importSpecifier = (0, utilily_functions_1.createImportSpecifier)(false, undefined, typescript_1.default.createIdentifier(identifierName));
        const namedBinding = typescript_1.default.createNamedImports([importSpecifier]);
        const importClause = typescript_1.default.createImportClause(undefined, namedBinding);
        const moduleSpecifier = typescript_1.default.createStringLiteral(from);
        const importDeclaration = typescript_1.default.createImportDeclaration(undefined, undefined, importClause, moduleSpecifier);
        const indexOfSameModuleImport = this.findImportDeclarationIndex({ from });
        if (indexOfSameModuleImport === -1) {
            this.pushImportDeclaration(importDeclaration);
        }
        else {
            const base = this.getStatements()[indexOfSameModuleImport];
            const merged = (0, utilily_functions_1.mergeImportDeclarationsWithSameModules)(base, importDeclaration);
            this._replaceStatement(indexOfSameModuleImport, merged);
        }
        return true;
    }
    pushDefaultImportIfNeeded(identifierName, from) {
        if (this.findImportDeclarationIndex({ name: identifierName, from, isDefault: true }) !== -1)
            return false;
        const importClause = typescript_1.default.createImportClause(typescript_1.default.createIdentifier(identifierName), undefined);
        const moduleSpecifier = typescript_1.default.createStringLiteral(from);
        const importDeclaration = typescript_1.default.createImportDeclaration(undefined, undefined, importClause, moduleSpecifier);
        const indexOfSameModuleImport = this.findImportDeclarationIndex({ from });
        if (indexOfSameModuleImport === -1) {
            this.pushImportDeclaration(importDeclaration);
        }
        else {
            const base = this.getStatements()[indexOfSameModuleImport];
            const merged = (0, utilily_functions_1.mergeImportDeclarationsWithSameModules)(base, importDeclaration);
            this._replaceStatement(indexOfSameModuleImport, merged);
        }
        return true;
    }
    pushImportDeclaration(declaration) {
        for (let i = 0; i < this._statements.length; i++) {
            if (!typescript_1.default.isImportDeclaration(this._statements[i])) {
                this._insertStatement(i, declaration);
                return;
            }
        }
        this._insertStatement(0, declaration);
    }
    pushStatement(statement) {
        this._insertStatement(this._statements.length, statement);
    }
    replaceStatement(statement, newStatement) {
        const idx = this._findIndex(statement);
        if (idx === -1)
            return false;
        this._replaceStatement(idx, newStatement);
        return true;
    }
    removeStatement(statement) {
        const idx = this._findIndex(statement);
        if (idx === -1)
            return false;
        this._statements = [...this._statements.slice(0, idx), ...this._statements.slice(idx + 1)];
        return true;
    }
    writeLeadingComment(comment) {
        if (this._statements.length > 0) {
            typescript_1.default.addSyntheticLeadingComment(this._statements[0], typescript_1.default.SyntaxKind.MultiLineCommentTrivia, ` ${comment} `, true);
        }
        else {
            this._unmergedComment.push(comment);
        }
    }
    getStatements() {
        return this._statements;
    }
    toSourceFile() {
        const sourceFile = typescript_1.default.createSourceFile(this._filename, '', typescript_1.default.ScriptTarget.Latest, false, typescript_1.default.ScriptKind.TS);
        return typescript_1.default.updateSourceFileNode(sourceFile, this._statements);
    }
    toFileContent() {
        const content = printer.printFile(this.toSourceFile());
        return { fileName: this._filename, content };
    }
    _findIndex(statement) {
        return this._statements.findIndex(st => st === statement);
    }
    _insertStatement(index, statement) {
        this._statements = [...this._statements.slice(0, index), statement, ...this._statements.slice(index)];
        if (this._unmergedComment.length) {
            this._unmergedComment.forEach(comment => this.writeLeadingComment(comment));
            this._unmergedComment = [];
        }
    }
    _replaceStatement(index, statement) {
        if (!this._statements[index])
            return;
        this._statements[index] = statement;
    }
}
exports.DefaultOutputSource = DefaultOutputSource;
function createOutputSource({ outputFileName }) {
    return new DefaultOutputSource(outputFileName);
}
exports.createOutputSource = createOutputSource;
//# sourceMappingURL=output-source.js.map