"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptHost = void 0;
const typescript_1 = __importDefault(require("typescript"));
class ScriptHost {
    constructor(_currentDirectory, _compilerOptions) {
        this._currentDirectory = _currentDirectory;
        this._compilerOptions = _compilerOptions;
        this._fileMap = new Map();
        this._fileVersionMap = new Map();
    }
    readFile(fileName) {
        const hit = this._fileMap.get(fileName);
        if (hit != null)
            return hit;
        return this.loadFromFileSystem(fileName);
    }
    loadFromFileSystem(fileName) {
        const content = typescript_1.default.sys.readFile(fileName, 'uts8');
        this._updateFile(fileName, content);
        return content;
    }
    getCurrentDirectory() {
        return this._currentDirectory;
    }
    getScriptSnapshot(fileName) {
        const file = this._fileMap.get(fileName);
        if (file == null)
            return;
        return typescript_1.default.ScriptSnapshot.fromString(file);
    }
    getScriptVersion(fileName) {
        const version = this._fileVersionMap.get(fileName);
        if (!version)
            return '0';
        return version + '';
    }
    getScriptFileNames() {
        return [...this._fileMap.keys()];
    }
    getCompilationSettings() {
        return this._compilerOptions;
    }
    getDefaultLibFileName(opt) {
        return typescript_1.default.getDefaultLibFileName(opt);
    }
    _updateFile(fileName, content) {
        this._fileMap.set(fileName, content);
        const currentVersion = this._fileVersionMap.get(fileName) || 0;
        this._fileVersionMap.set(fileName, currentVersion + 1);
    }
}
exports.ScriptHost = ScriptHost;
//# sourceMappingURL=script-host.js.map