"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebpackPlugin = void 0;
const path_1 = __importDefault(require("path"));
const transformer_1 = require("../transformer");
const PLUGIN_NAME = 'ts-graphql-plugin';
class WebpackPlugin {
    constructor({ tsconfigPath = process.cwd() } = {}) {
        this._disabled = false;
        this._host = new transformer_1.TransformerHost({ projectPath: tsconfigPath });
    }
    getTransformer(options) {
        return this._host.getTransformer({ ...options, getEnabled: () => !this._disabled });
    }
    apply(compiler) {
        compiler.hooks.afterPlugins.tap(PLUGIN_NAME, () => this._host.loadProject());
        compiler.hooks.watchRun.tap(PLUGIN_NAME, () => {
            var _a;
            this._disabled = compiler.options.mode === 'development';
            const watcher = compiler.watchFileSystem.watcher || compiler.watchFileSystem.wfs.watcher;
            const changedFiles = compiler.modifiedFiles
                ? [...compiler.modifiedFiles.keys()]
                : Object.keys((_a = watcher.mtimes) !== null && _a !== void 0 ? _a : []); // webpack v4 does not expose modifiedFiles. So we access to changed files with some hacks.
            const changedSourceFileNames = changedFiles.filter(f => path_1.default.extname(f) === '.ts' || path_1.default.extname(f) === '.tsx');
            this._host.updateFiles(changedSourceFileNames);
        });
    }
}
exports.WebpackPlugin = WebpackPlugin;
//# sourceMappingURL=plugin.js.map