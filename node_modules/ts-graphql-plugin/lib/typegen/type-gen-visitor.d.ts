import ts from 'typescript';
import { GraphQLSchema, DocumentNode, ASTNode } from 'graphql';
import { OutputSource } from '../ts-ast-util/types';
import { StrictAddon } from './addon/types';
export declare class TypeGenError extends Error {
    readonly message: string;
    readonly node: ASTNode;
    constructor(message: string, node: ASTNode);
}
export declare type TypeGenVisitorOptions = {
    schema: GraphQLSchema;
};
export declare type VisitOption = {
    outputSource: OutputSource;
    addon: StrictAddon;
};
export declare class TypeGenVisitor {
    private readonly _schema;
    constructor({ schema }: TypeGenVisitorOptions);
    visit(documentNode: DocumentNode, { outputSource, addon }: VisitOption): ts.SourceFile;
    private _getFieldMetadataFromFieldTypeInstance;
    private _getFieldMetadataFromTypeNode;
    private _isConcreteTypeOfParentUnionType;
    private _wrapTsTypeNodeWithStructualModifiers;
    private _createTsTypeNodeFromEnum;
    private _createTsDoubleUnderscoreTypenameFieldType;
    private _createTsTypeNodeFromScalar;
    private _createTsTypeDeclaration;
    private _createTsFieldTypeNode;
}
