"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformerHost = void 0;
const analyzer_1 = require("../analyzer");
const transformer_1 = require("./transformer");
class DocumentNodeRegistory {
    constructor() {
        this._map = new Map();
    }
    getFiles() {
        return [...this._map.keys()];
    }
    getDocumentNode(templateNode) {
        const positionMap = this._map.get(templateNode.getSourceFile().fileName);
        if (!positionMap)
            return;
        return positionMap.get(templateNode.getStart());
    }
    update(extractedResults) {
        extractedResults.forEach(result => {
            if (!result.documentNode)
                return;
            let positionMap = this._map.get(result.fileName);
            if (!positionMap) {
                positionMap = new Map();
                this._map.set(result.fileName, positionMap);
            }
            positionMap.set(result.templateNode.getStart(), result.documentNode);
        });
    }
}
class TransformerHost {
    constructor({ projectPath }) {
        this._documentNodeRegistory = new DocumentNodeRegistory();
        const { analyzer, scriptHost } = new analyzer_1.AnalyzerFactory().createAnalyzerAndScriptHostFromProjectPath(projectPath);
        this._analyzer = analyzer;
        this._scriptHost = { reloadFile: scriptHost.loadFromFileSystem.bind(scriptHost) };
    }
    loadProject() {
        const [, results] = this._analyzer.extract();
        this._documentNodeRegistory.update(results);
    }
    updateFiles(fileNameList) {
        fileNameList.forEach(fileName => this._scriptHost.reloadFile(fileName));
        // Note:
        // We need re-extract from not only changed .ts files but other files already opened
        // because the operations/fragments in not changed files can be affected by the change.
        //
        // For example:
        //    changed-file.ts     : export `fragment X on Query { fieldA }`
        //    other-opened-file.ts: declare `query { ...X }` importing fragment from changed-file.ts
        //
        // In the above case, the transformed output of other-opened-file.ts should have GraphQL docuemnt corresponding to `fragment X on Query { fieldA } query { ...X }`
        const [, results] = this._analyzer.extract([
            ...new Set([...fileNameList, ...this._documentNodeRegistory.getFiles()]),
        ]);
        this._documentNodeRegistory.update(results);
    }
    getTransformer({ target = 'object', removeFragmentDefinitions = true, documentTransformers = [], getEnabled = () => true, } = {}) {
        const { tag } = this._analyzer.getPluginConfig();
        const documentTransformerModules = documentTransformers.map(transformerName => {
            const mod = require(transformerName);
            if (typeof mod !== 'function') {
                throw new Error('Document transofmer should be function');
            }
            return mod;
        });
        return (0, transformer_1.getTransformer)({
            getEnabled,
            tag,
            target,
            removeFragmentDefinitions,
            getDocumentNode: node => this._documentNodeRegistory.getDocumentNode(node),
            documentTransformers: documentTransformerModules,
        });
    }
}
exports.TransformerHost = TransformerHost;
//# sourceMappingURL=transformer-host.js.map