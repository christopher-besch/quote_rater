import ts from 'typescript';
import { GraphQLSchema } from 'graphql';
import { ScriptSourceHelper } from '../ts-ast-util';
import { SchemaBuildErrorInfo } from '../schema-manager/schema-manager';
import { GetCompletionAtPosition, GetSemanticDiagnostics, GetQuickInfoAtPosition } from './types';
export interface GraphQLLanguageServiceAdapterCreateOptions {
    schema?: GraphQLSchema | null;
    schemaErrors?: SchemaBuildErrorInfo[] | null;
    logger?: (msg: string) => void;
    tag?: string;
    removeDuplicatedFragments: boolean;
}
declare type Args<T> = T extends (...args: infer A) => any ? A : never;
export declare class GraphQLLanguageServiceAdapter {
    private readonly _helper;
    private _schemaErrors?;
    private _schema?;
    private readonly _tagCondition?;
    private readonly _removeDuplicatedFragments;
    private readonly _analysisContext;
    constructor(_helper: ScriptSourceHelper, opt: GraphQLLanguageServiceAdapterCreateOptions);
    getCompletionAtPosition(delegate: GetCompletionAtPosition, ...args: Args<GetCompletionAtPosition>): ts.CompletionInfo | undefined;
    getSemanticDiagnostics(delegate: GetSemanticDiagnostics, ...args: Args<GetSemanticDiagnostics>): ts.Diagnostic[];
    getQuickInfoAtPosition(delegate: GetQuickInfoAtPosition, ...args: Args<GetQuickInfoAtPosition>): ts.QuickInfo | undefined;
    updateSchema(errors: SchemaBuildErrorInfo[] | null, schema: GraphQLSchema | null): void;
    private _createAnalysisContext;
    private _findTemplateNode;
    private _findTemplateNodes;
    private _resolveTemplateInfo;
    private _logger;
}
export {};
