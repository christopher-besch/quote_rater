import { GraphQLSchema } from 'graphql/type';
import { TsGqlError } from '../errors';
import { TypeGenAddonFactory, TypeGenVisitorAddonContext } from '../typegen';
import { OutputSource } from '../ts-ast-util';
import { Extractor, ExtractSucceededResult } from './extractor';
export declare type TypeGeneratorOptions = {
    prjRootPath: string;
    extractor: Extractor;
    debug: (msg: string) => void;
    tag: string | undefined;
    addonFactories: TypeGenAddonFactory[];
};
export declare class TypeGenerator {
    private readonly _prjRootPath;
    private readonly _extractor;
    private readonly _tag;
    private readonly _addonFactories;
    private readonly _debug;
    private readonly _printer;
    constructor({ prjRootPath, extractor, tag, addonFactories, debug }: TypeGeneratorOptions);
    createAddon({ schema, extractedResult, outputSource, }: {
        schema: GraphQLSchema;
        extractedResult: ExtractSucceededResult;
        outputSource: OutputSource;
    }): {
        addon: {
            customScalar: (input: import("../typegen").CustomScalarInput) => import("../typegen").CustomScalarOutput;
            document: (input: import("../typegen").DocumentInput) => void;
            operationDefinition: (input: import("../typegen").OperationDefinionInput) => void;
            fragmentDefinition: (input: import("../typegen").FragmentDefinitionInput) => void;
        };
        context: TypeGenVisitorAddonContext;
    };
    generateTypes({ files, schema }: {
        files: string[];
        schema: GraphQLSchema;
    }): {
        errors: TsGqlError[];
        outputSourceFiles: {
            fileName: string;
            content: string;
        }[];
    };
}
