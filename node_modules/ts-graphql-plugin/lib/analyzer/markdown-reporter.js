"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownReporter = void 0;
const path_1 = __importDefault(require("path"));
function createLinkPath(fileName, baseDir, outputDir) {
    const displayPath = path_1.default.isAbsolute(fileName) ? path_1.default.relative(baseDir, fileName) : fileName;
    const linkPath = path_1.default.isAbsolute(fileName) ? path_1.default.relative(outputDir, fileName) : fileName;
    return { displayPath, linkPath };
}
function createSection(sectionName, operationDocs, baseDir, outputDir) {
    const h2 = '## ' + sectionName[0].toUpperCase() + sectionName.slice(1);
    return (h2 +
        '\n' +
        operationDocs
            .map(doc => {
            const { displayPath, linkPath } = createLinkPath(doc.fileName, baseDir, outputDir);
            return `
### ${doc.type !== 'fragment' ? doc.operationName || 'anonymous' : doc.fragmentName}

\`\`\`graphql
${doc.body.trim()}
\`\`\`

From [${displayPath}:${doc.documentStart.line + 1}:${doc.documentStart.character + 1}](${linkPath}#L${doc.documentStart.line + 1}-L${doc.documentEnd.line + 1})
    `;
        })
            .join('\n'));
}
class MarkdownReporter {
    toMarkdownConntent(manifest, { ignoreFragments = true, baseDir, outputDir }) {
        if (!manifest.documents.length)
            return null;
        const outs = ['# Extracted GraphQL Operations'];
        const groupedDocs = {
            queries: [],
            mutations: [],
            subscriptions: [],
            fragments: [],
        };
        manifest.documents.forEach(doc => {
            switch (doc.type) {
                case 'query':
                    groupedDocs.queries.push(doc);
                    break;
                case 'mutation':
                    groupedDocs.mutations.push(doc);
                    break;
                case 'subscription':
                    groupedDocs.subscriptions.push(doc);
                    break;
                case 'fragment':
                    if (!ignoreFragments)
                        groupedDocs.fragments.push(doc);
                    break;
                default:
                    break;
            }
        });
        Object.entries(groupedDocs).forEach(([name, docs]) => {
            if (docs.length) {
                outs.push(createSection(name, docs, baseDir, outputDir));
            }
        });
        outs.push('---');
        outs.push('Extracted by [ts-graphql-plugin](https://github.com/Quramy/ts-graphql-plugin)');
        return outs.join('\n');
    }
}
exports.MarkdownReporter = MarkdownReporter;
//# sourceMappingURL=markdown-reporter.js.map