"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnalyzerFactory = void 0;
const path_1 = __importDefault(require("path"));
const typescript_1 = __importDefault(require("typescript"));
const analyzer_1 = require("./analyzer");
const ts_ast_util_1 = require("../ts-ast-util");
const schema_manager_1 = require("../schema-manager");
const errors_1 = require("../errors");
const NO_PLUGCN_SETTING_ERROR_MESSAGE = `tsconfig.json should have ts-graphql-plugin setting. Add the following:
  "compilerOptions": {
    "plugins": [
      {
        "name": "ts-graphql-plugin",
        "schema": "shema.graphql",   /* Path to your GraphQL schema */
        "tag": "gql"                 /* Template tag function name */
      }
    ]
  }`;
class TypegenAddonLoadError extends errors_1.ErrorWithoutLocation {
    constructor(addonName) {
        const message = `Fail to load typegen add-on. Confirm "${addonName}" points correct add-on script.`;
        super(message);
    }
}
function loadAddonFactories(pluginConfig, prjRootPath) {
    var _a, _b;
    if (!((_a = pluginConfig.typegen) === null || _a === void 0 ? void 0 : _a.addons) || !Array.isArray((_b = pluginConfig.typegen) === null || _b === void 0 ? void 0 : _b.addons))
        return [];
    const factories = pluginConfig.typegen.addons.map(addonName => {
        const addonPath = !path_1.default.isAbsolute(addonName) && addonName.startsWith('.')
            ? path_1.default.resolve(prjRootPath, addonName)
            : path_1.default.normalize(addonName);
        try {
            require.resolve(addonPath);
        }
        catch {
            throw new TypegenAddonLoadError(addonName);
        }
        return require(addonPath);
    });
    return [...new Set(factories)];
}
class AnalyzerFactory {
    createAnalyzerAndScriptHostFromProjectPath(projectPath, debug = () => { }, currentDirectory = process.cwd()) {
        const { pluginConfigOptions, tsconfig, prjRootPath } = this._readTsconfig(projectPath);
        const scriptHost = new ts_ast_util_1.ScriptHost(currentDirectory, tsconfig.options);
        tsconfig.fileNames.forEach(fileName => scriptHost.readFile(fileName));
        const addonFactories = loadAddonFactories(pluginConfigOptions, prjRootPath);
        const pluginConfig = {
            ...pluginConfigOptions,
            typegen: {
                addonFactories,
            },
        };
        const schemaManagerHost = (0, schema_manager_1.createSchemaManagerHostFromTSGqlPluginConfig)(pluginConfig, prjRootPath, debug);
        const schemaManager = new schema_manager_1.SchemaManagerFactory(schemaManagerHost).create();
        const analyzer = new analyzer_1.Analyzer(pluginConfig, prjRootPath, scriptHost, schemaManager, debug);
        return { analyzer, scriptHost };
    }
    createAnalyzerFromProjectPath(projectPath, debug = () => { }, currentDirectory = process.cwd()) {
        return this.createAnalyzerAndScriptHostFromProjectPath(projectPath, debug, currentDirectory).analyzer;
    }
    _readTsconfig(project) {
        const currentDirectory = typescript_1.default.sys.getCurrentDirectory();
        const ppath = path_1.default.isAbsolute(project) ? path_1.default.resolve(currentDirectory, project) : project;
        let configPath = undefined;
        if (typescript_1.default.sys.fileExists(ppath)) {
            configPath = ppath;
        }
        else if (typescript_1.default.sys.directoryExists(ppath) && typescript_1.default.sys.fileExists(path_1.default.join(ppath, 'tsconfig.json'))) {
            configPath = path_1.default.join(ppath, 'tsconfig.json');
        }
        if (!configPath) {
            throw new Error(`tsconfig file not found: ${project}`);
        }
        const tsconfig = typescript_1.default.getParsedCommandLineOfConfigFile(configPath, {}, typescript_1.default.sys);
        if (!tsconfig) {
            throw new Error(`Failed to parse: ${configPath}`);
        }
        const prjRootPath = path_1.default.dirname(configPath);
        const plugins = tsconfig.options.plugins;
        if (!plugins || !Array.isArray(plugins)) {
            throw new Error(NO_PLUGCN_SETTING_ERROR_MESSAGE);
        }
        const found = plugins.find((p) => (p._name || p.name) === 'ts-graphql-plugin');
        if (!found) {
            throw new Error(NO_PLUGCN_SETTING_ERROR_MESSAGE);
        }
        const pluginConfigOptions = found;
        return {
            tsconfig,
            pluginConfigOptions,
            prjRootPath,
        };
    }
}
exports.AnalyzerFactory = AnalyzerFactory;
//# sourceMappingURL=analyzer-factory.js.map