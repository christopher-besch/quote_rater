"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.typegenCommand = exports.cliDefinition = void 0;
const logger_1 = require("../logger");
exports.cliDefinition = {
    description: 'Generate TypeScript types from GraphQL operations or fragments in your .ts source files.',
    options: {
        project: {
            alias: 'p',
            description: "Analyze the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
            defaultValue: '.',
            type: 'string',
        },
        verbose: {
            description: 'Show debug messages.',
            type: 'boolean',
        },
    },
};
async function typegenCommand({ options }) {
    const ts = require('typescript');
    const { AnalyzerFactory } = require('../../analyzer');
    const { ErrorReporter } = require('../../errors/error-reporter');
    const { color } = require('../../string-util');
    const logger = new logger_1.ConsoleLogger(options.verbose ? 'debug' : 'info');
    const { project } = options;
    const errorReporter = new ErrorReporter(process.cwd(), logger.error.bind(logger));
    const analyzer = new AnalyzerFactory().createAnalyzerFromProjectPath(project, logger.debug.bind(logger));
    const { errors, outputSourceFiles } = await analyzer.typegen();
    if (errors.length) {
        logger.error(`Found ${color.red(errors.length + '')} errors generating type files.\n`);
        errors.forEach(error => errorReporter.outputError(error));
    }
    if (!outputSourceFiles || outputSourceFiles.length === 0) {
        logger.error('No type files to generate.');
        return false;
    }
    outputSourceFiles.forEach(source => ts.sys.writeFile(source.fileName, source.content));
    logger.info(`Write ${color.green(outputSourceFiles.length + ' type files')}.`);
    return true;
}
exports.typegenCommand = typegenCommand;
//# sourceMappingURL=typegen.js.map