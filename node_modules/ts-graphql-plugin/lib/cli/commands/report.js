"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportCommand = exports.cliDefinition = void 0;
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
exports.cliDefinition = {
    description: 'Output GraphQL operations in your TypeScript sources to markdown file.',
    options: {
        project: {
            alias: 'p',
            description: "Analyze the project given the path to its configuration file, or to a folder with a 'tsconfig.json'.",
            defaultValue: '.',
            type: 'string',
        },
        outFile: {
            alias: 'o',
            description: 'Output Markdown file name.',
            defaultValue: 'GRAPHQL_OPERATIONS.md',
            type: 'string',
        },
        fromManifest: {
            alias: 'M',
            description: 'Path to manifest.json file.',
            type: 'string',
        },
        includeFragments: {
            description: 'If set, report including fragment informations.',
            type: 'boolean',
        },
        verbose: {
            description: 'Show debug messages.',
            type: 'boolean',
        },
    },
};
async function reportCommand({ options }) {
    const ts = require('typescript');
    const { AnalyzerFactory } = require('../../analyzer');
    const { ErrorReporter } = require('../../errors/error-reporter');
    const { color } = require('../../string-util');
    const logger = new logger_1.ConsoleLogger(options.verbose ? 'debug' : 'info');
    const { fromManifest, outFile, project, includeFragments } = options;
    const errorReporter = new ErrorReporter(process.cwd(), logger.error.bind(logger));
    const analyzer = new AnalyzerFactory().createAnalyzerFromProjectPath(project, logger.debug.bind(logger));
    const manifest = fromManifest ? JSON.parse(ts.sys.readFile(fromManifest, 'utf8') || '') : undefined;
    let outFileName = path_1.default.isAbsolute(outFile) ? outFile : path_1.default.resolve(process.cwd(), outFile);
    outFileName = ts.sys.directoryExists(outFileName) ? path_1.default.join(outFileName, 'GRAPHQL_OPERATIONS.md') : outFileName;
    const [errors, markdown] = await analyzer.report(outFileName, manifest, !includeFragments);
    errors.forEach(errorReporter.outputError.bind(errorReporter));
    if (errors.length) {
        logger.error(color.magenta('Found some errors extracting operations.\n'));
        errors.forEach(error => errorReporter.outputError(error));
    }
    if (!markdown) {
        logger.error('No GraphQL operations.');
        return false;
    }
    ts.sys.writeFile(outFileName, markdown);
    logger.info(`Write report file to '${color.green(path_1.default.relative(process.cwd(), outFileName))}'.`);
    return true;
}
exports.reportCommand = reportCommand;
//# sourceMappingURL=report.js.map