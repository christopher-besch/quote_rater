#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const register_hooks_1 = require("../register-hooks");
const parser_1 = require("./parser");
const typegen_1 = require("./commands/typegen");
const extract_1 = require("./commands/extract");
const validate_1 = require("./commands/validate");
const report_1 = require("./commands/report");
const logger_1 = require("./logger");
async function main() {
    const logger = new logger_1.ConsoleLogger();
    const parser = (0, parser_1.createParser)({
        options: {
            help: {
                alias: 'h',
                description: 'Print this message.',
                type: 'boolean',
            },
            version: {
                alias: 'v',
                description: 'Print version.',
                type: 'boolean',
            },
        },
        commands: {
            typegen: typegen_1.cliDefinition,
            extract: extract_1.cliDefinition,
            validate: validate_1.cliDefinition,
            report: report_1.cliDefinition,
        },
        logger,
    });
    const cli = parser.parse();
    if (cli.errors) {
        if (cli.errors.unknownCommand) {
            logger.error(`Unknown command name: ${cli.errors.unknownCommand}. Available commands are: ${cli
                .availableCommandNames()
                .join(', ')} .`);
        }
        process.exit(1);
    }
    if (!cli.command) {
        if (cli.options.help) {
            cli.showHelp();
            process.exit(0);
        }
        if (cli.options.version) {
            logger.info(require('../../package.json').version);
            process.exit(0);
        }
        cli.showHelp();
        process.exit(1);
    }
    else {
        if (cli.options.help) {
            cli.showCommandHelp(Object.keys(cli.command)[0]);
            process.exit(0);
        }
    }
    let result = false;
    try {
        (0, register_hooks_1.registerTypeScript)();
        if (cli.command.typegen) {
            result = await (0, typegen_1.typegenCommand)(cli.command.typegen);
        }
        else if (cli.command.extract) {
            result = await (0, extract_1.extractCommand)(cli.command.extract);
        }
        else if (cli.command.validate) {
            result = await (0, validate_1.validateCommand)(cli.command.validate);
        }
        else if (cli.command.report) {
            result = await (0, report_1.reportCommand)(cli.command.report);
        }
        process.exit(result ? 0 : 1);
    }
    catch (e) {
        logger.error(e);
        process.exit(1);
    }
}
main();
//# sourceMappingURL=cli.js.map