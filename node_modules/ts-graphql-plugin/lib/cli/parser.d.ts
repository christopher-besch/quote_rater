import { Logger } from './logger';
declare type BooleanOptionEntry = {
    alias?: string;
    description?: string;
    type: 'boolean';
};
declare type StringOptionEntry = {
    alias?: string;
    description?: string;
    defaultValue: string;
    type: 'string';
};
declare type OptionalStringOptionEntry = {
    alias?: string;
    description?: string;
    type: 'string';
};
declare type IntegerOptionEntry = {
    alias?: string;
    description?: string;
    defaultValue?: number;
    type: 'int';
};
declare type CommandLineOptionEntry = BooleanOptionEntry | StringOptionEntry | OptionalStringOptionEntry | IntegerOptionEntry;
declare type OptionsHolder = {
    options: {
        [name: string]: CommandLineOptionEntry;
    };
};
export declare type CommandCliSetting = OptionsHolder & {
    description: string;
};
declare type ParseOptions = {
    options: {
        [name: string]: CommandLineOptionEntry;
    };
    commands: {
        [name: string]: CommandCliSetting;
    };
    logger: Logger;
};
declare type Dispatch<T extends CommandLineOptionEntry> = T extends BooleanOptionEntry ? boolean : T extends StringOptionEntry ? string : T extends OptionalStringOptionEntry ? string | undefined : T extends IntegerOptionEntry ? number : never;
declare type OptionsResult<T extends OptionsHolder> = {
    [P in keyof T['options']]: Dispatch<T['options'][P]>;
};
export declare type CommandOptions<T extends CommandCliSetting> = {
    _: string[];
    options: OptionsResult<T>;
};
declare type ParseResult<T extends ParseOptions> = {
    _: string[];
    options: {
        [P in keyof T['options']]: Dispatch<T['options'][P]>;
    };
    command?: {
        [P in keyof T['commands']]?: CommandOptions<T['commands'][P]>;
    };
    errors?: {
        unknownCommand?: string;
    };
    availableCommandNames: () => string[];
    showHelp: () => void;
    showCommandHelp: (commandName: string) => void;
};
export declare function createParser<T extends ParseOptions>(parseOptions: T): {
    parse: (rawArguments?: string[] | undefined) => ParseResult<T>;
};
export {};
