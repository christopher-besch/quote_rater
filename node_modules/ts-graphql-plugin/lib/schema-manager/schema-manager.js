"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoopSchemaManager = exports.SchemaManager = void 0;
const extension_manager_1 = require("./extension-manager");
class SchemaManager {
    constructor(_host) {
        this._host = _host;
        this._onChanges = [];
        this._extensionManager = new extension_manager_1.ExtensionManager(_host);
        this._extensionManager.readExtensions();
    }
    start(interval) {
        this._extensionManager.startWatch(() => this.emitChange(), interval);
        this.startWatch(interval);
    }
    getSchema() {
        const baseSchema = this.getBaseSchema();
        const schema = baseSchema && this._extensionManager.extendSchema(baseSchema);
        if (schema) {
            return { schema, errors: null };
        }
        else {
            return { schema: null, errors: this._extensionManager.getSchemaErrors() };
        }
    }
    async waitSchema() {
        const baseSchema = await this.waitBaseSchema();
        if (!baseSchema)
            return { schema: null, errors: null };
        const schema = this._extensionManager.extendSchema(baseSchema);
        if (schema) {
            return { schema, errors: null };
        }
        else {
            return { schema: null, errors: this._extensionManager.getSchemaErrors() };
        }
    }
    registerOnChange(cb) {
        this._onChanges.push(cb);
        return () => {
            this._onChanges = this._onChanges.filter(x => x !== cb);
        };
    }
    emitChange() {
        const { errors, schema } = this.getSchema();
        this._onChanges.forEach(cb => cb(errors, schema));
    }
    log(msg) {
        this._host.log(msg);
    }
}
exports.SchemaManager = SchemaManager;
class NoopSchemaManager extends SchemaManager {
    startWatch() { }
    async waitBaseSchema() {
        return null;
    }
    getBaseSchema() {
        return null;
    }
}
exports.NoopSchemaManager = NoopSchemaManager;
//# sourceMappingURL=schema-manager.js.map