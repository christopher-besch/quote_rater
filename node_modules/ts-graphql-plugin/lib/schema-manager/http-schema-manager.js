"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpSchemaManager = void 0;
const schema_manager_1 = require("./schema-manager");
const request_introspection_query_1 = require("./request-introspection-query");
class HttpSchemaManager extends schema_manager_1.SchemaManager {
    constructor(_host, _options = null) {
        super(_host);
        this._options = _options;
        this._schema = null;
    }
    async _getOptions() {
        return this._options;
    }
    _fetchErrorOcurred() { }
    getBaseSchema() {
        return this._schema;
    }
    async waitBaseSchema() {
        try {
            const options = await this._getOptions();
            if (options === null) {
                return null;
            }
            return await (0, request_introspection_query_1.requestIntrospectionQuery)(options);
        }
        catch (error) {
            return null;
        }
    }
    startWatch(interval = 1000) {
        const makeRequest = async (backoff = interval) => {
            let options;
            try {
                options = await this._getOptions();
            }
            catch (error) {
                setTimeout(makeRequest, backoff * 2.0);
                return;
            }
            if (options === null) {
                this.log(`Options cannot be null`);
                setTimeout(makeRequest, backoff * 2.0);
                return;
            }
            try {
                const query = await (0, request_introspection_query_1.requestIntrospectionQuery)(options);
                this.log(`Fetch schema data from ${options.url}.`);
                if (query) {
                    this._schema = query;
                    this.emitChange();
                }
                setTimeout(makeRequest, interval);
            }
            catch (reason) {
                this.log(`Fail to fetch schema data from ${options.url} via:`);
                this.log(`${JSON.stringify(reason, null, 2)}`);
                this._fetchErrorOcurred();
                setTimeout(makeRequest, backoff * 2.0);
            }
        };
        makeRequest();
    }
}
exports.HttpSchemaManager = HttpSchemaManager;
//# sourceMappingURL=http-schema-manager.js.map