"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSchemaManagerHostFromLSPluginInfo = exports.createSchemaManagerHostFromTSGqlPluginConfig = void 0;
const tsserverlibrary_1 = __importDefault(require("typescript/lib/tsserverlibrary"));
const path_1 = __importDefault(require("path"));
class SystemSchemaManagerHost {
    constructor(_pluginConfig, _prjRootPath, _debug) {
        this._pluginConfig = _pluginConfig;
        this._prjRootPath = _prjRootPath;
        this._debug = _debug;
    }
    log(msg) {
        return this._debug(msg);
    }
    watchFile(path, cb, interval) {
        return tsserverlibrary_1.default.sys.watchFile(path, cb, interval);
    }
    readFile(path, encoding) {
        return tsserverlibrary_1.default.sys.readFile(path, encoding);
    }
    fileExists(path) {
        return tsserverlibrary_1.default.sys.fileExists(path);
    }
    getConfig() {
        return this._pluginConfig;
    }
    getProjectRootPath() {
        return this._prjRootPath;
    }
}
function createSchemaManagerHostFromTSGqlPluginConfig(pluginConfig, prjRootPath, debug = () => { }) {
    return new SystemSchemaManagerHost(pluginConfig, prjRootPath, debug);
}
exports.createSchemaManagerHostFromTSGqlPluginConfig = createSchemaManagerHostFromTSGqlPluginConfig;
function createSchemaManagerHostFromLSPluginInfo(info) {
    return {
        getConfig() {
            return info.config;
        },
        fileExists(path) {
            return info.serverHost.fileExists(path);
        },
        readFile(path, encoding) {
            return info.serverHost.readFile(path, encoding);
        },
        watchFile(path, cb, interval) {
            return info.serverHost.watchFile(path, cb, interval);
        },
        getProjectRootPath() {
            return path_1.default.dirname(info.project.getProjectName());
        },
        log(msg) {
            info.project.projectService.logger.info(`[ts-graphql-plugin] ${msg}`);
        },
    };
}
exports.createSchemaManagerHostFromLSPluginInfo = createSchemaManagerHostFromLSPluginInfo;
//# sourceMappingURL=schema-manager-host.js.map