"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requestIntrospectionQuery = exports.isRequestSetup = void 0;
const graphql_1 = require("graphql");
const url_1 = require("url");
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const INTROSPECTION_QUERY_BODY = JSON.stringify({
    query: (0, graphql_1.getIntrospectionQuery)(),
});
const INTROSPECTION_QUERY_LENGTH = Buffer.byteLength(INTROSPECTION_QUERY_BODY);
function isRequestSetup(requestSetup) {
    const availablePropertyNames = ['url', 'method', 'headers'];
    for (const property in requestSetup) {
        if (!availablePropertyNames.includes(property)) {
            return false;
        }
    }
    return !!requestSetup.url;
}
exports.isRequestSetup = isRequestSetup;
function requestIntrospectionQuery(options) {
    const headers = {
        'Content-Type': 'application/json',
        'Content-Length': INTROSPECTION_QUERY_LENGTH,
        'User-Agent': 'ts-graphql-plugin',
        ...options.headers,
    };
    return new Promise((resolve, reject) => {
        const uri = (0, url_1.parse)(options.url);
        const { method = 'POST' } = options;
        const { hostname, protocol, path } = uri;
        const port = uri.port && Number.parseInt(uri.port, 10);
        const reqParam = { hostname, protocol, path, port, headers, method };
        const requester = protocol === 'https:' ? https_1.default.request : http_1.default.request;
        let body = '';
        const req = requester(reqParam, res => {
            res.on('data', chunk => (body += chunk));
            res.on('end', () => {
                if (!res.statusCode || res.statusCode < 200 || res.statusCode > 300) {
                    reject({
                        statusCode: res.statusCode,
                        body,
                    });
                }
                else {
                    let result;
                    try {
                        result = JSON.parse(body);
                        resolve((0, graphql_1.buildClientSchema)(result.data));
                    }
                    catch (e) {
                        reject(e);
                    }
                }
            });
        });
        req.on('error', reason => reject(reason));
        req.write(INTROSPECTION_QUERY_BODY);
        req.end();
    });
}
exports.requestIntrospectionQuery = requestIntrospectionQuery;
//# sourceMappingURL=request-introspection-query.js.map