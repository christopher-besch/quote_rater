"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaManagerFactory = void 0;
const schema_manager_1 = require("./schema-manager");
const file_schema_manager_1 = require("./file-schema-manager");
const http_schema_manager_1 = require("./http-schema-manager");
const scripted_http_schema_manager_1 = require("./scripted-http-schema-manager");
function isFileType(conf) {
    return !!conf.file;
}
function isHttpType(conf) {
    var _a;
    return !!((_a = conf.http) === null || _a === void 0 ? void 0 : _a.url);
}
function isScriptedHttpType(conf) {
    var _a;
    return !!((_a = conf.http) === null || _a === void 0 ? void 0 : _a.fromScript);
}
class SchemaManagerFactory {
    constructor(_host) {
        this._host = _host;
    }
    create() {
        const schemaConfig = this._host.getConfig().schema;
        let options;
        if (typeof schemaConfig === 'string') {
            options = this._convertOptionsFromString(schemaConfig);
        }
        else {
            options = schemaConfig;
        }
        if (isFileType(options)) {
            return new file_schema_manager_1.FileSchemaManager(this._host, options.file);
        }
        else if (isHttpType(options)) {
            return new http_schema_manager_1.HttpSchemaManager(this._host, options.http);
        }
        else if (isScriptedHttpType(options)) {
            return new scripted_http_schema_manager_1.ScriptedHttpSchemaManager(this._host, options.http);
        }
        return new schema_manager_1.NoopSchemaManager(this._host);
    }
    _convertOptionsFromString(path) {
        if (/https?/.test(path)) {
            return {
                http: {
                    url: path,
                },
            };
        }
        else {
            return {
                file: {
                    path,
                },
            };
        }
    }
}
exports.SchemaManagerFactory = SchemaManagerFactory;
//# sourceMappingURL=schema-manager-factory.js.map