import ts from 'typescript/lib/tsserverlibrary';
import { SchemaManagerHost, SchemaConfig } from './types';
import { TsGraphQLPluginConfigOptions } from '../types';
declare class SystemSchemaManagerHost implements SchemaManagerHost {
    private readonly _pluginConfig;
    private readonly _prjRootPath;
    private readonly _debug;
    constructor(_pluginConfig: TsGraphQLPluginConfigOptions, _prjRootPath: string, _debug: (msg: string) => void);
    log(msg: string): void;
    watchFile(path: string, cb: (fileName: string) => void, interval: number): {
        close(): void;
    };
    readFile(path: string, encoding?: string | undefined): string | undefined;
    fileExists(path: string): boolean;
    getConfig(): SchemaConfig;
    getProjectRootPath(): string;
}
export declare function createSchemaManagerHostFromTSGqlPluginConfig(pluginConfig: TsGraphQLPluginConfigOptions, prjRootPath: string, debug?: (msg: string) => void): SystemSchemaManagerHost;
export declare function createSchemaManagerHostFromLSPluginInfo(info: ts.server.PluginCreateInfo): SchemaManagerHost;
export {};
