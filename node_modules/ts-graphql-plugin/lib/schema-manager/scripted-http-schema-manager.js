"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScriptedHttpSchemaManager = void 0;
const request_introspection_query_1 = require("./request-introspection-query");
const path_1 = require("path");
const http_schema_manager_1 = require("./http-schema-manager");
class ScriptedHttpSchemaManager extends http_schema_manager_1.HttpSchemaManager {
    constructor(_host, options) {
        super(_host);
        this._scriptFileName = options.fromScript;
        this._host.watchFile(this._getScriptFilePath(), this._configurationScriptChanged.bind(this), 100);
    }
    _getScriptFilePath() {
        const rootPath = (0, path_1.isAbsolute)(this._host.getProjectRootPath()) ? this._host.getProjectRootPath() : process.cwd();
        return (0, path_1.join)(rootPath, this._scriptFileName);
    }
    _requireScript(path) {
        delete require.cache[path];
        return require(path);
    }
    _configurationScriptChanged() {
        this._options = null;
    }
    _fetchErrorOcurred() {
        this._options = null;
    }
    async _getOptions() {
        if (this._options !== null) {
            return this._options;
        }
        const configurationScriptPath = this._getScriptFilePath();
        if (!this._host.fileExists(configurationScriptPath)) {
            const errorMessage = `ScriptedHttpSchemaManager configuration script '${configurationScriptPath}' does not exist`;
            this.log(errorMessage);
            throw new Error(errorMessage);
        }
        const configurationScript = this._requireScript(configurationScriptPath);
        let setup = null;
        try {
            setup = await configurationScript(this._host.getProjectRootPath());
        }
        catch (error) {
            const errorMessage = `ScriptedHttpSchemaManager configuration script '${this._scriptFileName}' execution failed due to: ${error}`;
            this.log(errorMessage);
            throw new Error(errorMessage);
        }
        if (!(0, request_introspection_query_1.isRequestSetup)(setup)) {
            const errorMessage = `RequestSetup object is wrong: ${JSON.stringify(setup, null, 2)}`;
            this.log(errorMessage);
            throw new Error(errorMessage);
        }
        if (!/https?:/.test(setup.url)) {
            const errorMessage = `RequestSetup.url have to be valid url: ${setup.url}`;
            this.log(errorMessage);
            throw new Error(errorMessage);
        }
        setup.method = setup.method || 'POST';
        this._options = setup;
        return setup;
    }
}
exports.ScriptedHttpSchemaManager = ScriptedHttpSchemaManager;
//# sourceMappingURL=scripted-http-schema-manager.js.map