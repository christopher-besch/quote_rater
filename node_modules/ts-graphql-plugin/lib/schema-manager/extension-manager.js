"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionManager = void 0;
const path_1 = __importDefault(require("path"));
const graphql_1 = require("graphql");
class ExtensionManager {
    constructor(_host) {
        this._host = _host;
        this._parsedExtensionAstMap = new Map();
        this._graphqlErrorMap = new Map();
        const { localSchemaExtensions } = this._host.getConfig();
        this._targetSdlFileNames = (localSchemaExtensions || []).map(filePath => this._getAbsoluteSchemaPath(this._host.getProjectRootPath(), filePath));
    }
    readExtensions() {
        this._targetSdlFileNames.forEach(filePath => this._readExtension(filePath));
    }
    extendSchema(baseSchema) {
        if (this._graphqlErrorMap.size)
            return null;
        for (const [fileName, { node, sdlContent }] of this._parsedExtensionAstMap.entries()) {
            try {
                baseSchema = (0, graphql_1.extendSchema)(baseSchema, node);
            }
            catch (error) {
                if (error instanceof Error) {
                    const { message } = error;
                    this._graphqlErrorMap.set(fileName, { message, fileName, fileContent: sdlContent });
                }
                return null;
            }
        }
        this._graphqlErrorMap.clear();
        return baseSchema;
    }
    getSchemaErrors() {
        return [...this._graphqlErrorMap.values()];
    }
    startWatch(cb, interval = 100) {
        this._targetSdlFileNames.forEach(fileName => {
            this._host.watchFile(fileName, () => {
                this._host.log('Changed local extension schema: ' + fileName);
                this._readExtension(fileName);
                cb();
            }, interval);
        });
    }
    _readExtension(fileName) {
        if (!this._host.fileExists(fileName))
            return null;
        const sdlContent = this._host.readFile(fileName, 'utf8');
        if (!sdlContent)
            return null;
        this._host.log('Read local extension schema: ' + fileName);
        try {
            const node = (0, graphql_1.parse)(sdlContent);
            this._parsedExtensionAstMap.set(fileName, { node, sdlContent });
            this._graphqlErrorMap.delete(fileName);
        }
        catch (error) {
            if (error instanceof graphql_1.GraphQLError) {
                const { message, locations } = error;
                this._host.log('Failed to parse: ' + fileName + ', ' + message);
                if (locations) {
                    this._graphqlErrorMap.set(fileName, {
                        message,
                        fileName,
                        fileContent: sdlContent,
                        locations: locations.map(loc => ({ line: loc.line - 1, character: loc.column - 1 })),
                    });
                }
                else {
                    this._graphqlErrorMap.set(fileName, { message, fileName, fileContent: sdlContent });
                }
            }
        }
    }
    _getAbsoluteSchemaPath(projectRootPath, schemaPath) {
        if (path_1.default.isAbsolute(schemaPath))
            return schemaPath;
        return path_1.default.resolve(projectRootPath, schemaPath);
    }
}
exports.ExtensionManager = ExtensionManager;
//# sourceMappingURL=extension-manager.js.map