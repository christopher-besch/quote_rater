{"version":3,"sources":["../../src/schema/schema.js"],"names":["_","require","invariant","isSpecifiedScalarType","isIntrospectionType","assertValidName","GraphQLNonNull","GraphQLList","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","ObjectTypeComposer","InterfaceTypeComposer","UnionTypeComposer","InputTypeComposer","ScalarTypeComposer","EnumTypeComposer","getDataStore","getNode","getNodesByType","apiRunner","report","addNodeInterfaceFields","overridableBuiltInTypeNames","addInferredTypes","findOne","findManyPaginated","wrappingResolver","defaultResolver","processFieldExtensions","internalExtensionNames","isASTDocument","parseTypeDef","reportParsingError","printTypeDefinitions","buildSchema","schemaComposer","types","typeMapping","fieldExtensions","thirdPartySchemas","printConfig","enginePrintConfig","typeConflictReporter","inferenceMetadata","parentSpan","ready","updateSchemaComposer","schema","freezeTypeComposers","module","exports","excluded","Set","Array","from","values","forEach","tc","isCompositeTC","has","getTypeName","type","getType","activity","phantomActivity","start","addTypes","span","end","addInferredChildOfExtensions","process","env","GATSBY_SKIP_WRITING_SCHEMA_TO_FILE","config","addSetFieldsOnGraphQLNodeTypeFields","addConvenienceChildrenFields","Promise","all","map","typeComposer","processTypeComposer","checkQueryableInterfaces","addThirdPartySchemas","addCustomResolveFunctions","attachTracingResolver","hasInterface","determineSearchableFields","addTypeToRootQuery","isNodeInterface","fieldNames","query","typeName","camelCase","queryAll","convenienceChild","convenienceChildren","typeOrTypeDef","plugin","parsedTypes","createdFrom","parseTypes","doc","error","processAddedType","createTypeComposerFromGatsbyType","checkIsAllowedTypeName","get","mergeTypes","name","typeOwner","getExtension","isOverridableBuiltInType","isSafeMerge","hasExtension","warn","mergeFields","fields","getFields","getInterfaces","iface","addInterface","mergeResolveType","isNamedTypeComposer","extendExtensions","getExtensions","addExtensions","add","getResolveType","setResolveType","node","internal","addSchemaMustHaveType","setExtension","directives","getDirectives","args","hasCorrectIdField","hasField","getFieldType","toString","panic","getFieldNames","fieldName","setFieldExtension","getFieldDirectives","getFieldExtensions","Object","keys","filter","includes","definition","getDirective","defaultValue","undefined","arg","argumentDef","find","value","validate","message","endsWith","kind","GatsbyGraphQLTypeKind","OBJECT","createTemp","typeMapper","convertOutputFieldConfigMap","interfaces","tmpComposer","createInterfaceTC","getIFTC","INPUT_OBJECT","convertInputFieldConfigMap","UNION","createObjectTC","getOTC","INTERFACE","ENUM","SCALAR","JSON","stringify","result","nodes","traceId","addNestedFields","schemaQueryType","getQueryType","queryTC","createTempTC","processThirdPartyTypeFields","Query","addFields","getTypeMap","typeHasFields","_fields","createTC","resetOverriddenThirdPartyTypeFields","getFieldExtension","removeField","fieldType","String","replace","extendField","intermediateSchema","createResolvers","resolvers","ignoreNonexistentTypes","fieldConfig","originalFieldConfig","getFieldConfig","originalTypeName","originalResolver","resolve","fieldTypeName","isArray","stringifyArray","newConfig","source","context","info","defaultFieldResolver","extendFieldExtensions","needsResolve","field","getField","resolver","extensions","dateformat","searchable","SEARCHABLE_ENUM","SEARCHABLE","sortable","SORTABLE_ENUM","SORTABLE","proxy","isEmpty","DEPRECATED_SEARCHABLE","DEPRECATED_SORTABLE","parentTypesToChildren","Map","mimeTypesToChildren","typesHandlingMimeTypes","mimeType","set","mimeTypes","parentType","children","parent","getAnyTC","child","createChildrenField","createChildField","parentTypes","isExplicitChild","childTypeComposer","childOfExtension","parentMimeTypes","some","addInferredChildOfExtension","shouldInfer","parentTypeName","childNodeTypes","iterateNodesByType","childNode","push","description","path","nodeModel","getNodesByIds","ids","length","sortInputTC","filterInputTC","paginationTC","queryName","queryNamePlural","sort","skip","limit","makeFieldNonNull","definitions","def","parsedType","makeSchemaDef","ifaceName","_gqType","delete","arr","item","Error","ofType","v","parseValue","interfaceTypeComposer","queryableInterfaces","incorrectTypes","size","t","join","entries","setField","resolveType"],"mappings":"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","sourcesContent":["const _ = require(`lodash`)\nconst invariant = require(`invariant`)\nconst {\n  isSpecifiedScalarType,\n  isIntrospectionType,\n  assertValidName,\n  GraphQLNonNull,\n  GraphQLList,\n  GraphQLObjectType,\n  GraphQLInterfaceType,\n  GraphQLUnionType,\n} = require(`graphql`)\nconst {\n  ObjectTypeComposer,\n  InterfaceTypeComposer,\n  UnionTypeComposer,\n  InputTypeComposer,\n  ScalarTypeComposer,\n  EnumTypeComposer,\n} = require(`graphql-compose`)\nconst { getDataStore, getNode, getNodesByType } = require(`../datastore`)\n\nconst apiRunner = require(`../utils/api-runner-node`)\nconst report = require(`gatsby-cli/lib/reporter`)\nconst { addNodeInterfaceFields } = require(`./types/node-interface`)\nconst { overridableBuiltInTypeNames } = require(`./types/built-in-types`)\nconst { addInferredTypes } = require(`./infer`)\nconst {\n  findOne,\n  findManyPaginated,\n  wrappingResolver,\n  defaultResolver,\n} = require(`./resolvers`)\nconst {\n  processFieldExtensions,\n  internalExtensionNames,\n} = require(`./extensions`)\nimport { getPagination } from \"./types/pagination\"\nimport { getSortInput, SORTABLE_ENUM } from \"./types/sort\"\nimport { getFilterInput, SEARCHABLE_ENUM } from \"./types/filter\"\nimport { isGatsbyType, GatsbyGraphQLTypeKind } from \"./types/type-builders\"\n\nconst {\n  isASTDocument,\n  parseTypeDef,\n  reportParsingError,\n} = require(`./types/type-defs`)\nconst { printTypeDefinitions } = require(`./print`)\n\nconst buildSchema = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  enginePrintConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  // FIXME: consider removing .ready here - it is needed for various tests to pass (although probably harmless)\n  await getDataStore().ready()\n  await updateSchemaComposer({\n    schemaComposer,\n    types,\n    typeMapping,\n    fieldExtensions,\n    thirdPartySchemas,\n    printConfig,\n    enginePrintConfig,\n    typeConflictReporter,\n    inferenceMetadata,\n    parentSpan,\n  })\n  // const { printSchema } = require(`graphql`)\n  const schema = schemaComposer.buildSchema()\n  freezeTypeComposers(schemaComposer)\n\n  // console.log(printSchema(schema))\n  return schema\n}\n\nmodule.exports = {\n  buildSchema,\n}\n\n// Workaround for https://github.com/graphql-compose/graphql-compose/issues/319\n//  FIXME: remove this when fixed in graphql-compose\nconst freezeTypeComposers = (schemaComposer, excluded = new Set()) => {\n  Array.from(schemaComposer.values()).forEach(tc => {\n    const isCompositeTC =\n      tc instanceof ObjectTypeComposer || tc instanceof InterfaceTypeComposer\n\n    if (isCompositeTC && !excluded.has(tc.getTypeName())) {\n      // typeComposer.getType() actually mutates the underlying GraphQL type\n      //   and always re-assigns type._fields with a thunk.\n      //   It causes continuous redundant field re-definitions when running queries\n      //   (affects performance significantly).\n      //   Prevent the mutation and \"freeze\" the type:\n      const type = tc.getType()\n      tc.getType = () => type\n    }\n  })\n}\n\nconst updateSchemaComposer = async ({\n  schemaComposer,\n  types,\n  typeMapping,\n  fieldExtensions,\n  thirdPartySchemas,\n  printConfig,\n  enginePrintConfig,\n  typeConflictReporter,\n  inferenceMetadata,\n  parentSpan,\n}) => {\n  let activity = report.phantomActivity(`Add explicit types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await addTypes({ schemaComposer, parentSpan: activity.span, types })\n  activity.end()\n\n  activity = report.phantomActivity(`Add inferred types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  await addInferredTypes({\n    schemaComposer,\n    typeConflictReporter,\n    typeMapping,\n    inferenceMetadata,\n    parentSpan: activity.span,\n  })\n  addInferredChildOfExtensions({\n    schemaComposer,\n  })\n  activity.end()\n\n  activity = report.phantomActivity(`Processing types`, {\n    parentSpan: parentSpan,\n  })\n  activity.start()\n  if (!process.env.GATSBY_SKIP_WRITING_SCHEMA_TO_FILE) {\n    await printTypeDefinitions({\n      config: printConfig,\n      schemaComposer,\n      parentSpan: activity.span,\n    })\n    if (enginePrintConfig) {\n      // make sure to print schema that will be used when bundling graphql-engine\n      await printTypeDefinitions({\n        config: enginePrintConfig,\n        schemaComposer,\n        parentSpan: activity.span,\n      })\n    }\n  }\n  await addSetFieldsOnGraphQLNodeTypeFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await addConvenienceChildrenFields({\n    schemaComposer,\n    parentSpan: activity.span,\n  })\n  await Promise.all(\n    Array.from(new Set(schemaComposer.values())).map(typeComposer =>\n      processTypeComposer({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan: activity.span,\n      })\n    )\n  )\n  checkQueryableInterfaces({ schemaComposer, parentSpan: activity.span })\n  await addThirdPartySchemas({\n    schemaComposer,\n    thirdPartySchemas,\n    parentSpan: activity.span,\n  })\n  await addCustomResolveFunctions({ schemaComposer, parentSpan: activity.span })\n  attachTracingResolver({ schemaComposer, parentSpan: activity.span })\n  activity.end()\n}\n\nconst processTypeComposer = async ({\n  schemaComposer,\n  typeComposer,\n  fieldExtensions,\n  parentSpan,\n}) => {\n  if (typeComposer instanceof ObjectTypeComposer) {\n    await processFieldExtensions({\n      schemaComposer,\n      typeComposer,\n      fieldExtensions,\n      parentSpan,\n    })\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n    }\n    await determineSearchableFields({\n      schemaComposer,\n      typeComposer,\n      parentSpan,\n    })\n\n    if (typeComposer.hasInterface(`Node`)) {\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  } else if (typeComposer instanceof InterfaceTypeComposer) {\n    if (isNodeInterface(typeComposer)) {\n      await addNodeInterfaceFields({ schemaComposer, typeComposer, parentSpan })\n\n      // We only process field extensions for queryable Node interfaces, so we get\n      // the input args on the root query type, e.g. `formatString` etc. for `dateformat`\n      await processFieldExtensions({\n        schemaComposer,\n        typeComposer,\n        fieldExtensions,\n        parentSpan,\n      })\n      await determineSearchableFields({\n        schemaComposer,\n        typeComposer,\n        parentSpan,\n      })\n      await addTypeToRootQuery({ schemaComposer, typeComposer, parentSpan })\n    }\n  }\n}\n\nconst fieldNames = {\n  query: typeName => _.camelCase(typeName),\n  queryAll: typeName => _.camelCase(`all ${typeName}`),\n  convenienceChild: typeName => _.camelCase(`child ${typeName}`),\n  convenienceChildren: typeName => _.camelCase(`children ${typeName}`),\n}\n\nconst addTypes = ({ schemaComposer, types, parentSpan }) => {\n  types.forEach(({ typeOrTypeDef, plugin }) => {\n    if (typeof typeOrTypeDef === `string`) {\n      typeOrTypeDef = parseTypeDef(typeOrTypeDef)\n    }\n    if (isASTDocument(typeOrTypeDef)) {\n      let parsedTypes\n      const createdFrom = `sdl`\n      try {\n        parsedTypes = parseTypes({\n          doc: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          schemaComposer,\n          parentSpan,\n        })\n      } catch (error) {\n        reportParsingError(error)\n        return\n      }\n      parsedTypes.forEach(type => {\n        processAddedType({\n          schemaComposer,\n          type,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      })\n    } else if (isGatsbyType(typeOrTypeDef)) {\n      const type = createTypeComposerFromGatsbyType({\n        schemaComposer,\n        type: typeOrTypeDef,\n        parentSpan,\n      })\n\n      if (type) {\n        const typeName = type.getTypeName()\n        const createdFrom = `typeBuilder`\n        checkIsAllowedTypeName(typeName)\n        if (schemaComposer.has(typeName)) {\n          const typeComposer = schemaComposer.get(typeName)\n          mergeTypes({\n            schemaComposer,\n            typeComposer,\n            type,\n            plugin,\n            createdFrom,\n            parentSpan,\n          })\n        } else {\n          processAddedType({\n            schemaComposer,\n            type,\n            parentSpan,\n            createdFrom,\n            plugin,\n          })\n        }\n      }\n    } else {\n      const typeName = typeOrTypeDef.name\n      const createdFrom = `graphql-js`\n      checkIsAllowedTypeName(typeName)\n      if (schemaComposer.has(typeName)) {\n        const typeComposer = schemaComposer.get(typeName)\n        mergeTypes({\n          schemaComposer,\n          typeComposer,\n          type: typeOrTypeDef,\n          plugin,\n          createdFrom,\n          parentSpan,\n        })\n      } else {\n        processAddedType({\n          schemaComposer,\n          type: typeOrTypeDef,\n          parentSpan,\n          createdFrom,\n          plugin,\n        })\n      }\n    }\n  })\n}\n\nconst mergeTypes = ({\n  schemaComposer,\n  typeComposer,\n  type,\n  plugin,\n  createdFrom,\n  parentSpan,\n}) => {\n  // The merge is considered safe when a user or a plugin owning the type extend this type\n  // TODO: add proper conflicts detection and reporting (on the field level)\n  const typeOwner = typeComposer.getExtension(`plugin`)\n  const isOverridableBuiltInType =\n    !typeOwner && overridableBuiltInTypeNames.has(typeComposer.getTypeName())\n\n  const isSafeMerge =\n    !plugin ||\n    plugin.name === `default-site-plugin` ||\n    plugin.name === typeOwner ||\n    typeComposer.hasExtension(`isPlaceholder`) ||\n    isOverridableBuiltInType\n\n  if (!isSafeMerge) {\n    if (typeOwner) {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`, which has already been defined ` +\n          `by the plugin \\`${typeOwner}\\`. ` +\n          `This could potentially cause conflicts.`\n      )\n    } else {\n      report.warn(\n        `Plugin \\`${plugin.name}\\` has customized the built-in Gatsby GraphQL type ` +\n          `\\`${typeComposer.getTypeName()}\\`. ` +\n          `This is allowed, but could potentially cause conflicts.`\n      )\n    }\n  }\n\n  if (\n    type instanceof ObjectTypeComposer ||\n    type instanceof InterfaceTypeComposer ||\n    type instanceof GraphQLObjectType ||\n    type instanceof GraphQLInterfaceType\n  ) {\n    mergeFields({ typeComposer, fields: type.getFields() })\n    type.getInterfaces().forEach(iface => typeComposer.addInterface(iface))\n  }\n\n  if (\n    type instanceof GraphQLInterfaceType ||\n    type instanceof InterfaceTypeComposer ||\n    type instanceof GraphQLUnionType ||\n    type instanceof UnionTypeComposer\n  ) {\n    mergeResolveType({ typeComposer, type })\n  }\n\n  if (isNamedTypeComposer(type)) {\n    typeComposer.extendExtensions(type.getExtensions())\n  }\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return true\n}\n\nconst processAddedType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n  createdFrom,\n  plugin,\n}) => {\n  const typeName = schemaComposer.add(type)\n  const typeComposer = schemaComposer.get(typeName)\n  if (\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof UnionTypeComposer\n  ) {\n    if (!typeComposer.getResolveType()) {\n      typeComposer.setResolveType(node => node.internal.type)\n    }\n  }\n  schemaComposer.addSchemaMustHaveType(typeComposer)\n\n  addExtensions({ schemaComposer, typeComposer, plugin, createdFrom })\n\n  return typeComposer\n}\n\nconst addExtensions = ({\n  schemaComposer,\n  typeComposer,\n  plugin,\n  createdFrom,\n}) => {\n  typeComposer.setExtension(`createdFrom`, createdFrom)\n  typeComposer.setExtension(`plugin`, plugin ? plugin.name : null)\n\n  if (createdFrom === `sdl`) {\n    const directives = typeComposer.getDirectives()\n    directives.forEach(({ name, args }) => {\n      switch (name) {\n        case `infer`:\n        case `dontInfer`: {\n          typeComposer.setExtension(`infer`, name === `infer`)\n          break\n        }\n        case `mimeTypes`:\n          typeComposer.setExtension(`mimeTypes`, args)\n          break\n        case `childOf`:\n          typeComposer.setExtension(`childOf`, args)\n          break\n        case `nodeInterface`:\n          if (typeComposer instanceof InterfaceTypeComposer) {\n            typeComposer.setExtension(`nodeInterface`, true)\n          }\n          break\n        default:\n      }\n    })\n  }\n\n  if (\n    typeComposer instanceof InterfaceTypeComposer &&\n    isNodeInterface(typeComposer)\n  ) {\n    const hasCorrectIdField =\n      typeComposer.hasField(`id`) &&\n      typeComposer.getFieldType(`id`).toString() === `ID!`\n\n    if (!hasCorrectIdField) {\n      report.panic(\n        `Interfaces with the \\`nodeInterface\\` extension must have a field ` +\n          `\\`id\\` of type \\`ID!\\`. Check the type definition of ` +\n          `\\`${typeComposer.getTypeName()}\\`.`\n      )\n    }\n  }\n\n  if (\n    typeComposer instanceof ObjectTypeComposer ||\n    typeComposer instanceof InterfaceTypeComposer ||\n    typeComposer instanceof InputTypeComposer\n  ) {\n    typeComposer.getFieldNames().forEach(fieldName => {\n      typeComposer.setFieldExtension(fieldName, `createdFrom`, createdFrom)\n      typeComposer.setFieldExtension(\n        fieldName,\n        `plugin`,\n        plugin ? plugin.name : null\n      )\n\n      if (createdFrom === `sdl`) {\n        const directives = typeComposer.getFieldDirectives(fieldName)\n        directives.forEach(({ name, args }) => {\n          typeComposer.setFieldExtension(fieldName, name, args)\n        })\n      }\n\n      // Validate field extension args. `graphql-compose` already checks the\n      // type of directive args in `parseDirectives`, but we want to check\n      // extensions provided with type builders as well. Also, we warn if an\n      // extension option was provided which does not exist in the field\n      // extension definition.\n      const fieldExtensions = typeComposer.getFieldExtensions(fieldName)\n      const typeName = typeComposer.getTypeName()\n      Object.keys(fieldExtensions)\n        .filter(name => !internalExtensionNames.includes(name))\n        .forEach(name => {\n          const args = fieldExtensions[name]\n\n          if (!args || typeof args !== `object`) {\n            report.error(\n              `Field extension arguments must be provided as an object. ` +\n                `Received \"${args}\" on \\`${typeName}.${fieldName}\\`.`\n            )\n            return\n          }\n\n          try {\n            const definition = schemaComposer.getDirective(name)\n\n            // Handle `defaultValue` when not provided as directive\n            definition.args.forEach(({ name, defaultValue }) => {\n              if (args[name] === undefined && defaultValue !== undefined) {\n                args[name] = defaultValue\n              }\n            })\n\n            Object.keys(args).forEach(arg => {\n              const argumentDef = definition.args.find(\n                ({ name }) => name === arg\n              )\n              if (!argumentDef) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has invalid argument \\`${arg}\\`.`\n                )\n                return\n              }\n              const value = args[arg]\n              try {\n                validate(argumentDef.type, value)\n              } catch (error) {\n                report.error(\n                  `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                    `has argument \\`${arg}\\` with invalid value \"${value}\". ` +\n                    error.message\n                )\n              }\n            })\n          } catch (error) {\n            report.error(\n              `Field extension \\`${name}\\` on \\`${typeName}.${fieldName}\\` ` +\n                `is not available.`\n            )\n          }\n        })\n    })\n  }\n\n  return typeComposer\n}\n\nconst checkIsAllowedTypeName = name => {\n  invariant(\n    name !== `Node`,\n    `The GraphQL type \\`Node\\` is reserved for internal use.`\n  )\n  invariant(\n    !name.endsWith(`FilterInput`) && !name.endsWith(`SortInput`),\n    `GraphQL type names ending with \"FilterInput\" or \"SortInput\" are ` +\n      `reserved for internal use. Please rename \\`${name}\\`.`\n  )\n  invariant(\n    ![`Boolean`, `Date`, `Float`, `ID`, `Int`, `JSON`, `String`].includes(name),\n    `The GraphQL type \\`${name}\\` is reserved for internal use by ` +\n      `built-in scalar types.`\n  )\n  assertValidName(name)\n}\n\nconst createTypeComposerFromGatsbyType = ({\n  schemaComposer,\n  type,\n  parentSpan,\n}) => {\n  let typeComposer\n  switch (type.kind) {\n    case GatsbyGraphQLTypeKind.OBJECT: {\n      typeComposer = ObjectTypeComposer.createTemp({\n        ...type.config,\n        fields: () =>\n          schemaComposer.typeMapper.convertOutputFieldConfigMap(\n            type.config.fields\n          ),\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map(iface => {\n              if (typeof iface === `string`) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those interfaces actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                if (!schemaComposer.has(iface)) {\n                  const tmpComposer = schemaComposer.createInterfaceTC(iface)\n                  tmpComposer.setExtension(`isPlaceholder`, true)\n                  return tmpComposer\n                }\n                return schemaComposer.getIFTC(iface)\n              } else {\n                return iface\n              }\n            })\n          } else {\n            return []\n          }\n        },\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.INPUT_OBJECT: {\n      typeComposer = InputTypeComposer.createTemp({\n        ...type.config,\n        fields: schemaComposer.typeMapper.convertInputFieldConfigMap(\n          type.config.fields\n        ),\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.UNION: {\n      typeComposer = UnionTypeComposer.createTemp({\n        ...type.config,\n        types: () => {\n          if (type.config.types) {\n            return type.config.types.map(typeName => {\n              if (!schemaComposer.has(typeName)) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those types actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                const tmpComposer = schemaComposer.createObjectTC(typeName)\n                tmpComposer.setExtension(`isPlaceholder`, true)\n                return tmpComposer\n              }\n              return schemaComposer.getOTC(typeName)\n            })\n          } else {\n            return []\n          }\n        },\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.INTERFACE: {\n      typeComposer = InterfaceTypeComposer.createTemp({\n        ...type.config,\n        fields: () =>\n          schemaComposer.typeMapper.convertOutputFieldConfigMap(\n            type.config.fields\n          ),\n        interfaces: () => {\n          if (type.config.interfaces) {\n            return type.config.interfaces.map(iface => {\n              if (typeof iface === `string`) {\n                // Sadly, graphql-compose runs this function too early - before we have\n                // all of those interfaces actually created in the schema, so have to create\n                // a temporary placeholder composer :/\n                if (!schemaComposer.has(iface)) {\n                  const tmpComposer = schemaComposer.createInterfaceTC(iface)\n                  tmpComposer.setExtension(`isPlaceholder`, true)\n                  return tmpComposer\n                }\n                return schemaComposer.getIFTC(iface)\n              } else {\n                return iface\n              }\n            })\n          } else {\n            return []\n          }\n        },\n      })\n      break\n    }\n    case GatsbyGraphQLTypeKind.ENUM: {\n      typeComposer = EnumTypeComposer.createTemp(type.config)\n      break\n    }\n    case GatsbyGraphQLTypeKind.SCALAR: {\n      typeComposer = ScalarTypeComposer.createTemp(type.config)\n      break\n    }\n    default: {\n      report.warn(`Illegal type definition: ${JSON.stringify(type.config)}`)\n      typeComposer = null\n    }\n  }\n  if (typeComposer) {\n    // Workaround for https://github.com/graphql-compose/graphql-compose/issues/311\n    typeComposer.schemaComposer = schemaComposer\n  }\n  return typeComposer\n}\n\nconst addSetFieldsOnGraphQLNodeTypeFields = ({ schemaComposer, parentSpan }) =>\n  Promise.all(\n    Array.from(schemaComposer.values()).map(async tc => {\n      if (tc instanceof ObjectTypeComposer && tc.hasInterface(`Node`)) {\n        const typeName = tc.getTypeName()\n        const result = await apiRunner(`setFieldsOnGraphQLNodeType`, {\n          type: {\n            name: typeName,\n            get nodes() {\n              // TODO STRICT_MODE: return iterator instead of array\n              return getNodesByType(typeName)\n            },\n          },\n          traceId: `initial-setFieldsOnGraphQLNodeType`,\n          parentSpan,\n        })\n        if (result) {\n          // NOTE: `setFieldsOnGraphQLNodeType` only allows setting\n          // nested fields with a path as property name, i.e.\n          // `{ 'frontmatter.published': 'Boolean' }`, but not in the form\n          // `{ frontmatter: { published: 'Boolean' }}`\n          result.forEach(fields => tc.addNestedFields(fields))\n        }\n      }\n    })\n  )\n\nconst addThirdPartySchemas = ({\n  schemaComposer,\n  thirdPartySchemas,\n  parentSpan,\n}) => {\n  thirdPartySchemas.forEach(schema => {\n    const schemaQueryType = schema.getQueryType()\n    const queryTC = schemaComposer.createTempTC(schemaQueryType)\n    processThirdPartyTypeFields({\n      typeComposer: queryTC,\n      type: schemaQueryType,\n      schemaQueryType,\n    })\n    schemaComposer.Query.addFields(queryTC.getFields())\n\n    // Explicitly add the third-party schema's types, so they can be targeted\n    // in `createResolvers` API.\n    const types = schema.getTypeMap()\n    Object.keys(types).forEach(typeName => {\n      const type = types[typeName]\n      if (\n        type !== schemaQueryType &&\n        !isSpecifiedScalarType(type) &&\n        !isIntrospectionType(type) &&\n        type.name !== `Date` &&\n        type.name !== `JSON`\n      ) {\n        const typeHasFields =\n          type instanceof GraphQLObjectType ||\n          type instanceof GraphQLInterfaceType\n\n        // Workaround for an edge case typical for Relay Classic-compatible schemas.\n        // For example, GitHub API contains this piece:\n        //   type Query { relay: Query }\n        // And gatsby-source-graphql transforms it to:\n        //   type Query { github: GitHub }\n        //   type GitHub { relay: Query }\n        // The problem:\n        //   schemaComposer.createTC(type) for type `GitHub` will eagerly create type composers\n        //   for all fields (including `relay` and it's type: `Query` of the third-party schema)\n        //   This unexpected `Query` composer messes up with our own Query type composer and produces duplicate types.\n        //   The workaround is to make sure fields of the GitHub type are lazy and are evaluated only when\n        //   this Query type is already replaced with our own root `Query` type (see processThirdPartyTypeFields):\n        if (typeHasFields && typeof type._fields === `object`) {\n          const fields = type._fields\n          type._fields = () => fields\n        }\n        // ^^^ workaround done\n        const typeComposer = schemaComposer.createTC(type)\n        if (typeHasFields) {\n          processThirdPartyTypeFields({\n            typeComposer,\n            type,\n            schemaQueryType,\n          })\n        }\n        typeComposer.setExtension(`createdFrom`, `thirdPartySchema`)\n        schemaComposer.addSchemaMustHaveType(typeComposer)\n      }\n    })\n  })\n}\n\nconst resetOverriddenThirdPartyTypeFields = ({ typeComposer }) => {\n  // The problem: createResolvers API mutates third party schema instance.\n  //   For example it can add a new field referencing a type from our main schema\n  //   Then if we rebuild the schema this old type instance will sneak into\n  //   the new schema and produce the famous error:\n  //   \"Schema must contain uniquely named types but contains multiple types named X\"\n  // This function only affects schema rebuilding pathway.\n  //   It cleans up artifacts created by the `createResolvers` API of the previous build\n  //   so that we return the third party schema to its initial state (hence can safely re-add)\n  // TODO: the right way to fix this would be not to mutate the third party schema in\n  //   the first place. But unfortunately mutation happens in the `graphql-compose`\n  //   and we don't have an easy way to avoid it without major rework\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const createdFrom = typeComposer.getFieldExtension(fieldName, `createdFrom`)\n    if (createdFrom === `createResolvers`) {\n      typeComposer.removeField(fieldName)\n      return\n    }\n    const config = typeComposer.getFieldExtension(\n      fieldName,\n      `originalFieldConfig`\n    )\n    if (config) {\n      typeComposer.removeField(fieldName)\n      typeComposer.addFields({\n        [fieldName]: config,\n      })\n    }\n  })\n}\n\nconst processThirdPartyTypeFields = ({\n  typeComposer,\n  type,\n  schemaQueryType,\n}) => {\n  // Fix for types that refer to Query. Thanks Relay Classic!\n  const fields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    // Remove customization that we could have added via `createResolvers`\n    // to make it work with schema rebuilding\n    const fieldType = String(fields[fieldName].type)\n    if (fieldType.replace(/[[\\]!]/g, ``) === schemaQueryType.name) {\n      typeComposer.extendField(fieldName, {\n        type: fieldType.replace(schemaQueryType.name, `Query`),\n      })\n    }\n  })\n  resetOverriddenThirdPartyTypeFields({ typeComposer })\n}\n\nconst addCustomResolveFunctions = async ({ schemaComposer, parentSpan }) => {\n  const intermediateSchema = schemaComposer.buildSchema()\n  const createResolvers = (\n    resolvers,\n    { ignoreNonexistentTypes = false } = {}\n  ) => {\n    Object.keys(resolvers).forEach(typeName => {\n      const fields = resolvers[typeName]\n      if (schemaComposer.has(typeName)) {\n        const tc = schemaComposer.getOTC(typeName)\n        Object.keys(fields).forEach(fieldName => {\n          const fieldConfig = fields[fieldName]\n          if (tc.hasField(fieldName)) {\n            const originalFieldConfig = tc.getFieldConfig(fieldName)\n            const originalTypeName = originalFieldConfig.type.toString()\n            const originalResolver = originalFieldConfig.resolve\n            let fieldTypeName\n            if (fieldConfig.type) {\n              fieldTypeName = Array.isArray(fieldConfig.type)\n                ? stringifyArray(fieldConfig.type)\n                : fieldConfig.type.toString()\n            }\n\n            if (\n              !fieldTypeName ||\n              fieldTypeName.replace(/!/g, ``) ===\n                originalTypeName.replace(/!/g, ``) ||\n              tc.getExtension(`createdFrom`) === `thirdPartySchema`\n            ) {\n              const newConfig = {}\n              if (fieldConfig.type) {\n                newConfig.type = fieldConfig.type\n              }\n              if (fieldConfig.args) {\n                newConfig.args = fieldConfig.args\n              }\n              if (fieldConfig.resolve) {\n                newConfig.resolve = (source, args, context, info) =>\n                  fieldConfig.resolve(source, args, context, {\n                    ...info,\n                    originalResolver:\n                      originalResolver || context.defaultFieldResolver,\n                  })\n                tc.extendFieldExtensions(fieldName, {\n                  needsResolve: true,\n                })\n              }\n              tc.extendField(fieldName, newConfig)\n\n              // See resetOverriddenThirdPartyTypeFields for explanation\n              if (tc.getExtension(`createdFrom`) === `thirdPartySchema`) {\n                tc.setFieldExtension(\n                  fieldName,\n                  `originalFieldConfig`,\n                  originalFieldConfig\n                )\n              }\n            } else if (fieldTypeName) {\n              report.warn(\n                `\\`createResolvers\\` passed resolvers for field ` +\n                  `\\`${typeName}.${fieldName}\\` with type \\`${fieldTypeName}\\`. ` +\n                  `Such a field with type \\`${originalTypeName}\\` already exists ` +\n                  `on the type. Use \\`createTypes\\` to override type fields.`\n              )\n            }\n          } else {\n            tc.addFields({\n              [fieldName]: fieldConfig,\n            })\n            // See resetOverriddenThirdPartyTypeFields for explanation\n            tc.setFieldExtension(fieldName, `createdFrom`, `createResolvers`)\n          }\n        })\n      } else if (!ignoreNonexistentTypes) {\n        report.warn(\n          `\\`createResolvers\\` passed resolvers for type \\`${typeName}\\` that ` +\n            `doesn't exist in the schema. Use \\`createTypes\\` to add the type ` +\n            `before adding resolvers.`\n        )\n      }\n    })\n  }\n  await apiRunner(`createResolvers`, {\n    intermediateSchema,\n    createResolvers,\n    traceId: `initial-createResolvers`,\n    parentSpan,\n  })\n}\n\nfunction attachTracingResolver({ schemaComposer }) {\n  schemaComposer.forEach(typeComposer => {\n    if (\n      typeComposer instanceof ObjectTypeComposer ||\n      typeComposer instanceof InterfaceTypeComposer\n    ) {\n      typeComposer.getFieldNames().forEach(fieldName => {\n        const field = typeComposer.getField(fieldName)\n        const resolver = wrappingResolver(field.resolve || defaultResolver)\n        typeComposer.extendField(fieldName, {\n          resolve: resolver,\n        })\n      })\n    }\n  })\n}\n\nconst determineSearchableFields = ({ schemaComposer, typeComposer }) => {\n  typeComposer.getFieldNames().forEach(fieldName => {\n    const field = typeComposer.getField(fieldName)\n    const extensions = typeComposer.getFieldExtensions(fieldName)\n    if (field.resolve) {\n      if (extensions.dateformat) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: extensions.proxy ? true : false,\n        })\n      } else if (!_.isEmpty(field.args)) {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.DEPRECATED_SEARCHABLE,\n          sortable: SORTABLE_ENUM.DEPRECATED_SORTABLE,\n          needsResolve: true,\n        })\n      } else {\n        typeComposer.extendFieldExtensions(fieldName, {\n          searchable: SEARCHABLE_ENUM.SEARCHABLE,\n          sortable: SORTABLE_ENUM.SORTABLE,\n          needsResolve: true,\n        })\n      }\n    } else {\n      typeComposer.extendFieldExtensions(fieldName, {\n        searchable: SEARCHABLE_ENUM.SEARCHABLE,\n        sortable: SORTABLE_ENUM.SORTABLE,\n        needsResolve: false,\n      })\n    }\n  })\n}\n\nconst addConvenienceChildrenFields = ({ schemaComposer }) => {\n  const parentTypesToChildren = new Map()\n  const mimeTypesToChildren = new Map()\n  const typesHandlingMimeTypes = new Map()\n\n  schemaComposer.forEach(type => {\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`mimeTypes`)\n    ) {\n      const { types } = type.getExtension(`mimeTypes`)\n      new Set(types).forEach(mimeType => {\n        if (!typesHandlingMimeTypes.has(mimeType)) {\n          typesHandlingMimeTypes.set(mimeType, new Set())\n        }\n        typesHandlingMimeTypes.get(mimeType).add(type)\n      })\n    }\n\n    if (\n      (type instanceof ObjectTypeComposer ||\n        type instanceof InterfaceTypeComposer) &&\n      type.hasExtension(`childOf`)\n    ) {\n      if (type instanceof ObjectTypeComposer && !type.hasInterface(`Node`)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n      if (type instanceof InterfaceTypeComposer && !isNodeInterface(type)) {\n        report.error(\n          `The \\`childOf\\` extension can only be used on types that implement the \\`Node\\` interface.\\n` +\n            `Check the type definition of \\`${type.getTypeName()}\\`.`\n        )\n        return\n      }\n\n      const { types, mimeTypes } = type.getExtension(`childOf`)\n\n      new Set(types).forEach(parentType => {\n        if (!parentTypesToChildren.has(parentType)) {\n          parentTypesToChildren.set(parentType, new Set())\n        }\n        parentTypesToChildren.get(parentType).add(type)\n      })\n      new Set(mimeTypes).forEach(mimeType => {\n        if (!mimeTypesToChildren.has(mimeType)) {\n          mimeTypesToChildren.set(mimeType, new Set())\n        }\n        mimeTypesToChildren.get(mimeType).add(type)\n      })\n    }\n  })\n\n  parentTypesToChildren.forEach((children, parent) => {\n    if (!schemaComposer.has(parent)) return\n    const typeComposer = schemaComposer.getAnyTC(parent)\n    if (\n      typeComposer instanceof InterfaceTypeComposer &&\n      !isNodeInterface(typeComposer)\n    ) {\n      report.error(\n        `With the \\`childOf\\` extension, children fields can only be added to ` +\n          `interfaces which implement the \\`Node\\` interface.\\n` +\n          `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n      )\n      return\n    }\n    children.forEach(child => {\n      typeComposer.addFields(createChildrenField(child.getTypeName()))\n      typeComposer.addFields(createChildField(child.getTypeName()))\n    })\n  })\n\n  mimeTypesToChildren.forEach((children, mimeType) => {\n    const parentTypes = typesHandlingMimeTypes.get(mimeType)\n    if (parentTypes) {\n      parentTypes.forEach(typeComposer => {\n        if (\n          typeComposer instanceof InterfaceTypeComposer &&\n          !isNodeInterface(typeComposer)\n        ) {\n          report.error(\n            `With the \\`childOf\\` extension, children fields can only be added to ` +\n              `interfaces which implement the \\`Node\\` interface.\\n` +\n              `Check the type definition of \\`${typeComposer.getTypeName()}\\`.`\n          )\n          return\n        }\n        children.forEach(child => {\n          typeComposer.addFields(createChildrenField(child.getTypeName()))\n          typeComposer.addFields(createChildField(child.getTypeName()))\n        })\n      })\n    }\n  })\n}\n\nconst isExplicitChild = ({ typeComposer, childTypeComposer }) => {\n  if (!childTypeComposer.hasExtension(`childOf`)) {\n    return false\n  }\n  const childOfExtension = childTypeComposer.getExtension(`childOf`)\n  const { types: parentMimeTypes = [] } =\n    typeComposer.getExtension(`mimeTypes`) ?? {}\n\n  return (\n    childOfExtension?.types?.includes(typeComposer.getTypeName()) ||\n    childOfExtension?.mimeTypes?.some(mimeType =>\n      parentMimeTypes.includes(mimeType)\n    )\n  )\n}\n\nconst addInferredChildOfExtensions = ({ schemaComposer }) => {\n  schemaComposer.forEach(typeComposer => {\n    if (\n      typeComposer instanceof ObjectTypeComposer &&\n      typeComposer.hasInterface(`Node`)\n    ) {\n      addInferredChildOfExtension({\n        schemaComposer,\n        typeComposer,\n      })\n    }\n  })\n}\n\nconst addInferredChildOfExtension = ({ schemaComposer, typeComposer }) => {\n  const shouldInfer = typeComposer.getExtension(`infer`)\n  // With `@dontInfer`, only parent-child\n  // relations explicitly set with the `@childOf` extension are added.\n  if (shouldInfer === false) return\n\n  const parentTypeName = typeComposer.getTypeName()\n\n  // This is expensive.\n  // TODO: We should probably collect this info during inference metadata pass\n  const childNodeTypes = new Set()\n  for (const node of getDataStore().iterateNodesByType(parentTypeName)) {\n    const children = (node.children || []).map(getNode)\n    for (const childNode of children) {\n      if (childNode?.internal?.type) {\n        childNodeTypes.add(childNode.internal.type)\n      }\n    }\n  }\n\n  childNodeTypes.forEach(typeName => {\n    const childTypeComposer = schemaComposer.getAnyTC(typeName)\n    let childOfExtension = childTypeComposer.getExtension(`childOf`)\n\n    if (isExplicitChild({ typeComposer, childTypeComposer })) {\n      return\n    }\n    // Set `@childOf` extension automatically\n    // This will cause convenience children fields like `childImageSharp`\n    // to be added in `addConvenienceChildrenFields` method.\n    // Also required for proper printing of the `@childOf` directive in the snapshot plugin\n    if (!childOfExtension) {\n      childOfExtension = {}\n    }\n    if (!childOfExtension.types) {\n      childOfExtension.types = []\n    }\n    childOfExtension.types.push(parentTypeName)\n    childTypeComposer.setExtension(`childOf`, childOfExtension)\n  })\n}\n\nconst createChildrenField = typeName => {\n  return {\n    [fieldNames.convenienceChildren(typeName)]: {\n      type: () => [typeName],\n      description: `Returns all children nodes filtered by type ${typeName}`,\n      resolve(source, args, context) {\n        const { path } = context\n        return context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n      },\n    },\n  }\n}\n\nconst createChildField = typeName => {\n  return {\n    [fieldNames.convenienceChild(typeName)]: {\n      type: () => typeName,\n      description:\n        `Returns the first child node of type ${typeName} ` +\n        `or null if there are no children of given type on this node`,\n      resolve(source, args, context) {\n        const { path } = context\n        const result = context.nodeModel.getNodesByIds(\n          { ids: source.children, type: typeName },\n          { path }\n        )\n        if (result && result.length > 0) {\n          return result[0]\n        } else {\n          return null\n        }\n      },\n    },\n  }\n}\n\nconst addTypeToRootQuery = ({ schemaComposer, typeComposer }) => {\n  const sortInputTC = getSortInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const filterInputTC = getFilterInput({\n    schemaComposer,\n    typeComposer,\n  })\n  const paginationTC = getPagination({\n    schemaComposer,\n    typeComposer,\n  })\n\n  const typeName = typeComposer.getTypeName()\n  // not strictly correctly, result is `npmPackage` and `allNpmPackage` from type `NPMPackage`\n  const queryName = fieldNames.query(typeName)\n  const queryNamePlural = fieldNames.queryAll(typeName)\n\n  schemaComposer.Query.addFields({\n    [queryName]: {\n      type: typeComposer,\n      args: {\n        ...filterInputTC.getFields(),\n      },\n      resolve: findOne(typeName),\n    },\n    [queryNamePlural]: {\n      type: paginationTC,\n      args: {\n        filter: filterInputTC,\n        sort: sortInputTC,\n        skip: `Int`,\n        limit: `Int`,\n      },\n      resolve: findManyPaginated(typeName),\n    },\n  }).makeFieldNonNull(queryNamePlural)\n}\n\nconst parseTypes = ({\n  doc,\n  plugin,\n  createdFrom,\n  schemaComposer,\n  parentSpan,\n}) => {\n  const types = []\n  doc.definitions.forEach(def => {\n    const name = def.name.value\n    checkIsAllowedTypeName(name)\n\n    if (schemaComposer.has(name)) {\n      // We don't check if ast.kind matches composer type, but rely\n      // that this will throw when something is wrong and get\n      // reported by `reportParsingError`.\n\n      // Keep the original type composer around\n      const typeComposer = schemaComposer.get(name)\n\n      // After this, the parsed type composer will be registered as the composer\n      // handling the type name (requires cleanup after merging, see below)\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n\n      // Merging types require implemented interfaces to already exist.\n      // Depending on type creation order, interface might have not been\n      // processed yet. We check if interface already exist and create\n      // placeholder for it, if it doesn't exist yet.\n      if (parsedType.getInterfaces) {\n        parsedType.getInterfaces().forEach(iface => {\n          const ifaceName = iface.getTypeName()\n          if (!schemaComposer.has(ifaceName)) {\n            const tmpComposer = schemaComposer.createInterfaceTC(ifaceName)\n            tmpComposer.setExtension(`isPlaceholder`, true)\n          }\n        })\n      }\n\n      // Merge the parsed type with the original\n      mergeTypes({\n        schemaComposer,\n        typeComposer,\n        type: parsedType,\n        plugin,\n        createdFrom,\n        parentSpan,\n      })\n\n      // Cleanup:\n      // Set the original type composer (with the merged fields added)\n      // as the correct composer for the type name and remove the temporary one\n      // `graphql-compose` doesn't make that easy 🤯\n      // TODO: clean this up when this issue is fixed:\n      //  https://github.com/graphql-compose/graphql-compose/issues/311\n      schemaComposer.set(typeComposer.getTypeName(), typeComposer)\n      schemaComposer.set(typeComposer._gqType, typeComposer)\n      schemaComposer.delete(parsedType._gqType)\n      schemaComposer.delete(parsedType)\n    } else {\n      const parsedType = schemaComposer.typeMapper.makeSchemaDef(def)\n      types.push(parsedType)\n    }\n  })\n  return types\n}\n\nconst stringifyArray = arr =>\n  `[${arr.map(item =>\n    Array.isArray(item) ? stringifyArray(item) : item.toString()\n  )}]`\n\n// TODO: Import this directly from graphql-compose once we update to v7\nconst isNamedTypeComposer = type =>\n  type instanceof ObjectTypeComposer ||\n  type instanceof InputTypeComposer ||\n  type instanceof ScalarTypeComposer ||\n  type instanceof EnumTypeComposer ||\n  type instanceof InterfaceTypeComposer ||\n  type instanceof UnionTypeComposer\n\nconst validate = (type, value) => {\n  if (type instanceof GraphQLNonNull) {\n    if (value == null) {\n      throw new Error(`Expected non-null field value.`)\n    }\n    return validate(type.ofType, value)\n  } else if (type instanceof GraphQLList) {\n    if (!Array.isArray(value)) {\n      throw new Error(`Expected array field value.`)\n    }\n    return value.map(v => validate(type.ofType, v))\n  } else {\n    return type.parseValue(value)\n  }\n}\n\nconst isNodeInterface = interfaceTypeComposer =>\n  interfaceTypeComposer.hasInterface(`Node`)\n\nconst checkQueryableInterfaces = ({ schemaComposer }) => {\n  const queryableInterfaces = new Set()\n  schemaComposer.forEach(type => {\n    if (type instanceof InterfaceTypeComposer && isNodeInterface(type)) {\n      queryableInterfaces.add(type.getTypeName())\n    }\n  })\n  const incorrectTypes = new Set()\n  schemaComposer.forEach(type => {\n    if (type instanceof ObjectTypeComposer) {\n      const interfaces = type.getInterfaces()\n      if (\n        interfaces.some(iface =>\n          queryableInterfaces.has(iface.getTypeName())\n        ) &&\n        !type.hasInterface(`Node`)\n      ) {\n        incorrectTypes.add(type.getTypeName())\n      }\n    }\n  })\n  if (incorrectTypes.size) {\n    report.panic(\n      `Types implementing queryable interfaces must also implement the \\`Node\\` ` +\n        `interface. Check the type definition of ` +\n        `${Array.from(incorrectTypes)\n          .map(t => `\\`${t}\\``)\n          .join(`, `)}.`\n    )\n  }\n}\n\nconst mergeFields = ({ typeComposer, fields }) =>\n  Object.entries(fields).forEach(([fieldName, fieldConfig]) => {\n    if (typeComposer.hasField(fieldName)) {\n      typeComposer.extendField(fieldName, fieldConfig)\n    } else {\n      typeComposer.setField(fieldName, fieldConfig)\n    }\n  })\n\nconst mergeResolveType = ({ typeComposer, type }) => {\n  if (\n    (type instanceof GraphQLInterfaceType ||\n      type instanceof GraphQLUnionType) &&\n    type.resolveType\n  ) {\n    typeComposer.setResolveType(type.resolveType)\n  }\n  if (\n    (type instanceof InterfaceTypeComposer ||\n      type instanceof UnionTypeComposer) &&\n    type.getResolveType()\n  ) {\n    typeComposer.setResolveType(type.getResolveType())\n  }\n  if (!typeComposer.getResolveType()) {\n    typeComposer.setResolveType(node => node?.internal?.type)\n  }\n}\n"],"file":"schema.js"}