"use strict";

exports.__esModule = true;
exports.default = void 0;

var _helperPluginUtils = require("@babel/helper-plugin-utils");

var t = _interopRequireWildcard(require("@babel/types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Partially copied from https://github.com/babel/minify/blob/1ad7838116ec34621d39bb1b4a985e7601eab659/packages/babel-plugin-transform-inline-environment-variables/src/index.js
var _default = (0, _helperPluginUtils.declare)(function replaceEnvVars(api, options) {
  var _options$apis;

  api.assertVersion(7);
  const apisToInclude = (_options$apis = options === null || options === void 0 ? void 0 : options.apis) !== null && _options$apis !== void 0 ? _options$apis : [];

  if (!apisToInclude.length) {
    console.warn(`No list of APIs was given to replace env vars, check your plugin options.`);
  }

  function isLeftSideOfAssignmentExpression(path) {
    return t.isAssignmentExpression(path.parent) && path.parent.left === path.node;
  }

  function replacement(path) {
    if (path.get(`object`).matchesPattern(`process.env`)) {
      const key = path.toComputedKey();

      if (t.isStringLiteral(key) && !isLeftSideOfAssignmentExpression(path)) {
        path.replaceWith(t.valueToNode(process.env[key.value]));
      }
    }
  }

  return {
    name: `ssr-env-vars`,
    visitor: {
      ExportNamedDeclaration(path) {
        const declaration = path.node.declaration;

        if (t.isExportNamedDeclaration(path.node)) {
          const hasExport = path.node.specifiers.some(specifier => t.isExportSpecifier(specifier) && t.isIdentifier(specifier.exported) && apisToInclude.includes(specifier.exported.name));

          if (hasExport) {
            path.traverse({
              MemberExpression(path) {
                replacement(path);
              }

            });
          }
        }

        let apiToCheck;

        if (t.isFunctionDeclaration(declaration) && declaration.id) {
          apiToCheck = declaration.id.name;
        }

        if (t.isVariableDeclaration(declaration) && t.isIdentifier(declaration.declarations[0].id)) {
          apiToCheck = declaration.declarations[0].id.name;
        }

        if (apiToCheck && apisToInclude.includes(apiToCheck)) {
          path.traverse({
            MemberExpression(path) {
              replacement(path);
            }

          });
        }
      }

    }
  };
});

exports.default = _default;
//# sourceMappingURL=babel-plugin-env-vars.js.map