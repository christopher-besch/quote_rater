{"version":3,"sources":["../../../src/utils/babel/babel-plugin-env-vars.ts"],"names":["replaceEnvVars","api","options","assertVersion","apisToInclude","apis","length","console","warn","isLeftSideOfAssignmentExpression","path","t","isAssignmentExpression","parent","left","node","replacement","get","matchesPattern","key","toComputedKey","isStringLiteral","replaceWith","valueToNode","process","env","value","name","visitor","ExportNamedDeclaration","declaration","isExportNamedDeclaration","hasExport","specifiers","some","specifier","isExportSpecifier","isIdentifier","exported","includes","traverse","MemberExpression","apiToCheck","isFunctionDeclaration","id","isVariableDeclaration","declarations"],"mappings":";;;;;AAAA;;AACA;;;;;;AAGA;eAEe,gCAAQ,SAASA,cAAT,CACrBC,GADqB,EAErBC,OAFqB,EAGV;AAAA;;AACXD,EAAAA,GAAG,CAACE,aAAJ,CAAkB,CAAlB;AAEA,QAAMC,aAAa,oBAAGF,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEG,IAAZ,yDAAoB,EAAvC;;AAEA,MAAI,CAACD,aAAa,CAACE,MAAnB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,IAAR,CACG,2EADH;AAGD;;AAED,WAASC,gCAAT,CAA0CC,IAA1C,EAAyD;AACvD,WACEC,CAAC,CAACC,sBAAF,CAAyBF,IAAI,CAACG,MAA9B,KAAyCH,IAAI,CAACG,MAAL,CAAYC,IAAZ,KAAqBJ,IAAI,CAACK,IADrE;AAGD;;AAED,WAASC,WAAT,CAAqBN,IAArB,EAAiC;AAC/B,QAAIA,IAAI,CAACO,GAAL,CAAU,QAAV,EAAmBC,cAAnB,CAAmC,aAAnC,CAAJ,EAAsD;AACpD,YAAMC,GAAG,GAAGT,IAAI,CAACU,aAAL,EAAZ;;AACA,UAAIT,CAAC,CAACU,eAAF,CAAkBF,GAAlB,KAA0B,CAACV,gCAAgC,CAACC,IAAD,CAA/D,EAAuE;AACrEA,QAAAA,IAAI,CAACY,WAAL,CAAiBX,CAAC,CAACY,WAAF,CAAcC,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACO,KAAhB,CAAd,CAAjB;AACD;AACF;AACF;;AAED,SAAO;AACLC,IAAAA,IAAI,EAAG,cADF;AAELC,IAAAA,OAAO,EAAE;AACPC,MAAAA,sBAAsB,CAACnB,IAAD,EAAa;AACjC,cAAMoB,WAAW,GAAGpB,IAAI,CAACK,IAAL,CAAUe,WAA9B;;AAEA,YAAInB,CAAC,CAACoB,wBAAF,CAA2BrB,IAAI,CAACK,IAAhC,CAAJ,EAA2C;AACzC,gBAAMiB,SAAS,GAAGtB,IAAI,CAACK,IAAL,CAAUkB,UAAV,CAAqBC,IAArB,CAChBC,SAAS,IACPxB,CAAC,CAACyB,iBAAF,CAAoBD,SAApB,KACAxB,CAAC,CAAC0B,YAAF,CAAeF,SAAS,CAACG,QAAzB,CADA,IAEAlC,aAAa,CAACmC,QAAd,CAAuBJ,SAAS,CAACG,QAAV,CAAmBX,IAA1C,CAJc,CAAlB;;AAMA,cAAIK,SAAJ,EAAe;AACbtB,YAAAA,IAAI,CAAC8B,QAAL,CAAc;AACZC,cAAAA,gBAAgB,CAAC/B,IAAD,EAAO;AACrBM,gBAAAA,WAAW,CAACN,IAAD,CAAX;AACD;;AAHW,aAAd;AAKD;AACF;;AAED,YAAIgC,UAAJ;;AACA,YAAI/B,CAAC,CAACgC,qBAAF,CAAwBb,WAAxB,KAAwCA,WAAW,CAACc,EAAxD,EAA4D;AAC1DF,UAAAA,UAAU,GAAGZ,WAAW,CAACc,EAAZ,CAAejB,IAA5B;AACD;;AAED,YACEhB,CAAC,CAACkC,qBAAF,CAAwBf,WAAxB,KACAnB,CAAC,CAAC0B,YAAF,CAAeP,WAAW,CAACgB,YAAZ,CAAyB,CAAzB,EAA4BF,EAA3C,CAFF,EAGE;AACAF,UAAAA,UAAU,GAAGZ,WAAW,CAACgB,YAAZ,CAAyB,CAAzB,EAA4BF,EAA5B,CAA+BjB,IAA5C;AACD;;AAED,YAAIe,UAAU,IAAItC,aAAa,CAACmC,QAAd,CAAuBG,UAAvB,CAAlB,EAAsD;AACpDhC,UAAAA,IAAI,CAAC8B,QAAL,CAAc;AACZC,YAAAA,gBAAgB,CAAC/B,IAAD,EAAO;AACrBM,cAAAA,WAAW,CAACN,IAAD,CAAX;AACD;;AAHW,WAAd;AAKD;AACF;;AAvCM;AAFJ,GAAP;AA4CD,CAzEc,C","sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\"\nimport * as t from \"@babel/types\"\nimport type { PluginObj, ConfigAPI } from \"@babel/core\"\n\n// Partially copied from https://github.com/babel/minify/blob/1ad7838116ec34621d39bb1b4a985e7601eab659/packages/babel-plugin-transform-inline-environment-variables/src/index.js\n\nexport default declare(function replaceEnvVars(\n  api: ConfigAPI,\n  options: { apis?: Array<string> }\n): PluginObj {\n  api.assertVersion(7)\n\n  const apisToInclude = options?.apis ?? []\n\n  if (!apisToInclude.length) {\n    console.warn(\n      `No list of APIs was given to replace env vars, check your plugin options.`\n    )\n  }\n\n  function isLeftSideOfAssignmentExpression(path): boolean {\n    return (\n      t.isAssignmentExpression(path.parent) && path.parent.left === path.node\n    )\n  }\n\n  function replacement(path): void {\n    if (path.get(`object`).matchesPattern(`process.env`)) {\n      const key = path.toComputedKey()\n      if (t.isStringLiteral(key) && !isLeftSideOfAssignmentExpression(path)) {\n        path.replaceWith(t.valueToNode(process.env[key.value]))\n      }\n    }\n  }\n\n  return {\n    name: `ssr-env-vars`,\n    visitor: {\n      ExportNamedDeclaration(path): void {\n        const declaration = path.node.declaration\n\n        if (t.isExportNamedDeclaration(path.node)) {\n          const hasExport = path.node.specifiers.some(\n            specifier =>\n              t.isExportSpecifier(specifier) &&\n              t.isIdentifier(specifier.exported) &&\n              apisToInclude.includes(specifier.exported.name)\n          )\n          if (hasExport) {\n            path.traverse({\n              MemberExpression(path) {\n                replacement(path)\n              },\n            })\n          }\n        }\n\n        let apiToCheck\n        if (t.isFunctionDeclaration(declaration) && declaration.id) {\n          apiToCheck = declaration.id.name\n        }\n\n        if (\n          t.isVariableDeclaration(declaration) &&\n          t.isIdentifier(declaration.declarations[0].id)\n        ) {\n          apiToCheck = declaration.declarations[0].id.name\n        }\n\n        if (apiToCheck && apisToInclude.includes(apiToCheck)) {\n          path.traverse({\n            MemberExpression(path) {\n              replacement(path)\n            },\n          })\n        }\n      },\n    },\n  }\n})\n"],"file":"babel-plugin-env-vars.js"}