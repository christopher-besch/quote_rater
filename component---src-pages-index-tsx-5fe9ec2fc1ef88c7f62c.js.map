{"version":3,"file":"component---src-pages-index-tsx-5fe9ec2fc1ef88c7f62c.js","mappings":"oOACWA,EAAO,2B,60BCDlB,IAAMC,EAAc,6DAmEpB,SAASC,EAAoBC,GACzB,MAAO,CACHC,cAAeD,EAAeC,cAC9BC,aAAcF,EAAeE,aAC7BC,IAAKH,EAAeG,IACpBC,KAAMJ,EAAeI,KACrBC,KAAML,EAAeK,KACrBC,SAAUN,EAAeM,SACzBC,UAAWP,EAAeO,UAC1BC,cAAeR,EAAeQ,cAC9BC,kBAAmBT,EAAeS,kBAClCC,KAAMV,EAAeU,KACrBC,QAASX,EAAeW,SAKzB,SAASC,EAAoBC,EAAoCC,EAAsCC,QAAqE,IAArEA,IAAAA,EAAoD,cAC9J,IAAIC,EAhEG,CACHC,OAAQ,GACRC,IAAK,GACLC,aAAc,GACdN,iBAAkB,KAClBC,mBAAoB,MA4DxBE,EAAcH,iBAAmBA,EACjCG,EAAcF,mBAAqBA,EACnCE,EAAcE,IAAML,EAAiBO,MACrCJ,EAAcG,aAAeL,EAAmBM,MAChDC,EAAyBL,GA0F7B,SAAuBE,EAAaH,GAChC,IAAIO,EAAU,IAAIC,eAClBD,EAAQE,OAAS,WACS,KAAlBF,EAAQG,OACRV,EAASO,EAAQI,cAEjBC,QAAQC,MAAR,mBAAiCV,EAAjC,iBAAqDI,EAAQG,SAGrEH,EAAQO,QAAU,WACdF,QAAQC,MAAR,mBAAiCV,EAAjC,MAEJI,EAAQQ,KAAK,MAAOZ,GAAK,GACzBI,EAAQS,OArGRC,CAAchB,EAAcE,KAAK,SAACe,GAE9B,IADA,IAAIC,EACGA,EAAQpC,EAAYqC,KAAKF,IAC5BjB,EAAcC,OAAOmB,KAAK,CAAEC,OAAQH,EAAM,GAAII,KAAMJ,EAAM,GAAIK,OAAQL,EAAM,GAAIM,SAAUN,EAAM,KAEpGP,QAAQc,IAAR,UAAsBzB,EAAcC,OAAOyB,OAA3C,WACA3B,EAASC,MAIV,SAAS2B,EAAqB3B,EAA6BhB,GAI9D,OAHAgB,EAAcG,aAAeyB,KAAKC,UAAU7C,EAAeW,SAC3DU,EAAyBL,GAc7B,SAA6BA,GACe,MAApCA,EAAcF,qBACdE,EAAcF,mBAAmBM,MAAQJ,EAAcG,cACrB,MAAlCH,EAAcH,mBACdG,EAAcH,iBAAiBO,MAAQJ,EAAcE,KAjBzD4B,CAAoB9B,GA5ExB,SAA4BA,GACxB,MAAO,CACHC,OAAQD,EAAcC,OACtBC,IAAKF,EAAcE,IACnBC,aAAcH,EAAcG,aAC5BN,iBAAkBG,EAAcH,iBAChCC,mBAAoBE,EAAcF,oBAuE/BiC,CAAmB/B,GAG9B,SAASK,EAAyBL,GAC9B,IAAIgC,EAAoB,IAAIC,gBAAgBC,SAASC,QAErDH,EAAkBI,IAAI,aAAcpC,EAAcE,KAClD8B,EAAkBI,IAAI,eAAgBpC,EAAcG,cAEpDkC,OAAOC,QAAQC,aAAa,GAAI,GAAOL,SAASM,SAAhD,IAA4DR,EAAkBS,YAkFlF,SAASC,EAAK1D,EAA+B2D,GACzC,KAAOA,GAAK3D,EAAeI,KAAKuD,IAC5BA,EAAI3D,EAAeI,KAAKuD,GAC5B,OAAOA,EAEX,SAASC,EAAK5D,EAA+B6D,EAAWC,GACpD,OAAOJ,EAAK1D,EAAgB6D,IAAMH,EAAK1D,EAAgB8D,GAgB3D,SAASC,EAAW/D,GAChBA,EAAeE,aAAe,GAE9B,IADA,IAAIuB,EAAmB,GACduC,EAAI,EAAGA,EAAIhE,EAAeQ,gBAAiBwD,EAChDvC,EAAOW,KAAK,GAEhB,IAAK,IAAI4B,EAAIhE,EAAeQ,cAAgB,EAAGwD,GAAK,IAAKA,EACrDC,EAASjE,EAAgBgE,EAAGvC,GAChCzB,EAAeE,aAAagE,UAEhC,SAASD,EAASjE,EAA+BmE,EAAa1C,GAC1D,GAAmB,GAAfA,EAAO0C,GAGX,GAAmB,GAAf1C,EAAO0C,GAAX,CAIA1C,EAAO0C,GAAO,EAEd,cAAiBnE,EAAeG,IAAIgE,MAApC,cACIF,EAASjE,EADb,QACmCyB,GAEnCzB,EAAeE,aAAakC,KAAK+B,GACjC1C,EAAO0C,GAAO,OATVxC,QAAQc,IAAI,kBAapB,SAAS2B,EAAgBpE,EAA+BqE,GAGpD,IADA,IAAIC,EAAqB,GAChBN,EAAI,EAAGA,EAAIhE,EAAeQ,gBAAiBwD,EAChDM,EAAQlC,MAAK,GACjBmC,EAAWvE,EAAgBqE,EAAOC,GAAU,GAG5C,IADA,IAAIE,EAAyB,GACpBR,EAAI,EAAGA,EAAIM,EAAQ5B,SAAUsB,EAC7BM,EAAQN,IACTQ,EAAapC,KAAK4B,GAC1BQ,EAAaC,MAAK,kBAAMC,KAAKC,SAAW,MAExC,cAAwBH,EAAxB,gBAAK,IAAII,EAAW,KAChB,IAAKC,EAAa7E,EAAgB4E,EAAaP,GAC3C,OAAOO,EACf,OAAQ,EAGZ,SAASC,EAAa7E,EAA+BqE,EAAeS,GAEhE,IADA,IAAIR,EAAqB,GAChBN,EAAI,EAAGA,EAAIhE,EAAeQ,gBAAiBwD,EAChDM,EAAQlC,MAAK,GACjB,OAAOmC,EAAWvE,EAAgBqE,EAAOC,EAASQ,GAEtD,SAASP,EAAWvE,EAA+BmE,EAAaG,EAAoBQ,GAChF,GAAIX,GAAOW,EACP,OAAO,EACX,GAAIR,EAAQH,GACR,OAAO,EACXG,EAAQH,IAAO,EAEf,cAAiBnE,EAAeG,IAAIgE,MAApC,cACI,GAAII,EAAWvE,EADnB,QACyCsE,EAASQ,GAC1C,OAAO,EACf,OAAO,EAIX,SAASC,EAAW/E,EAA+BgF,EAAgBC,GAC/DC,EAAoBlF,EAAgBgF,EAAQC,GAC5ClB,EAAW/D,GACXmF,EAAcnF,GACdA,EAAeW,QAAQyB,KAAK,CAAC4C,EAAQC,IAEzC,SAASC,EAAoBlF,EAA+BgF,EAAgBC,GACxEtD,QAAQc,IAAOuC,EAAf,gBAAqCC,GACrCjF,EAAeG,IAAI6E,GAAQ5C,KAAK6C,GAzFpC,SAAejF,EAA+B6D,EAAWC,GAIrD,IAHAD,EAAIH,EAAK1D,EAAgB6D,MACzBC,EAAIJ,EAAK1D,EAAgB8D,IAEzB,CAEA,GAAI9D,EAAeK,KAAKwD,GAAK7D,EAAeK,KAAKyD,GAAjD,OACa,CAACA,EAAGD,GAAZA,EADL,KACQC,EADR,KAEA9D,EAAeK,KAAKwD,IAAM7D,EAAeK,KAAKyD,GAC9C9D,EAAeI,KAAK0D,GAAKD,IACvB7D,EAAeS,mBAgFjB2E,CAAMpF,EAAgBgF,EAAQC,GAGlC,SAASE,EAAcnF,GAGnB,IADA,IAAIqF,EAAwB,GACnBrB,EAAI,EAAGA,EAAIhE,EAAeQ,gBAAiBwD,EAChDqB,EAAYjD,KAAK4B,GAIrB,GAHAqB,EAAYZ,MAAK,kBAAMC,KAAKC,SAAW,MAGnC3E,EAAeS,kBAAoB,EACnC,cAAqB4E,KAArB,aACI,IAD+B,IAC/B,EADK/E,EAAyB,QAC9B,IAAsB+E,KAAtB,aAAmC,CAAC,IAA3B9E,EAA0B,QAC/B,IAAKqD,EAAK5D,EAAgBM,EAAUC,GAGhC,OAFAP,EAAeM,SAAWA,OAC1BN,EAAeO,UAAYA,QAQvC,cAAqB8E,KAArB,aAAkC,CAAC,IAA1B/E,EAAyB,QAC1BC,EAAY6D,EAAgBpE,EAAgBM,GAChD,IAAkB,GAAdC,EAGA,OAFAP,EAAeM,SAAWA,OAC1BN,EAAeO,UAAYA,GAKvCoB,QAAQc,IAAI,yBACZzC,EAAeU,MAAO,ECpT1B,IAsGA,EAtGuB,SAAC4E,GAAW,IAAD,IAC9B,GAAyCC,EAAAA,EAAAA,UDDlC,CACHtE,OAAQ,GACRC,IAAK,GACLC,aAAc,GACdN,iBAAkB,KAClBC,mBAAoB,OCJnBE,EAAL,KAAoBwE,EAApB,KACA,GAA2CD,EAAAA,EAAAA,UD8BpC,CACHtF,eAAe,EACfC,aAAc,GACdC,IAAK,GACLC,KAAM,GACNC,KAAM,GACNC,UAAW,EACXC,WAAY,EACZC,cAAe,EACfC,kBAAmB,EACnBC,MAAM,EACNC,QAAS,KCzCRX,EAAL,KAAqByF,EAArB,KA0DA,OAvDAC,EAAAA,EAAAA,YAAU,WAEN,IAAI1C,EAAoB,IAAIC,gBAAgBC,SAASC,QAEjDwC,EAAiB3C,EAAkB4C,IAAI,cACvC/E,EAAmBgF,SAASC,eAAe,oBACjB,IAA1BjF,EAAiBO,QACjBP,EAAiBO,MAAQuE,GAAkC,IAE/D,IAAII,EAAmB/C,EAAkB4C,IAAI,gBACzC9E,EAAqB+E,SAASC,eAAe,sBACjB,IAA5BhF,EAAmBM,QACnBN,EAAmBM,MAAQ2E,GAAsC,SA4CrE,gBAAC,IAAD,KACI,gBAAC,IAAD,CAASC,QAAQ,gBACjB,yBAAOC,QAAQ,oBAAf,sBACA,yBAAOC,GAAG,mBAAmBC,KAAK,SAAe,2BACjD,yBAAOF,QAAQ,sBAAf,yBACA,yBAAOC,GAAG,qBAAqBC,KAAK,SAAe,2BACnD,0BAAQC,QA/ChB,WACIzE,QAAQc,IAAI,uBAIZ7B,EAHuBiF,SAASC,eAAe,oBACtBD,SAASC,eAAe,uBAES,SAACO,GACvDb,EAAkBa,GAClBZ,ED8EL,SAA8BzE,GACjC,IAAIhB,EA1EG,CACHC,eAAe,EACfC,aAAc,GACdC,IAAK,GACLC,KAAM,GACNC,KAAM,GACNC,UAAW,EACXC,WAAY,EACZC,cAAe,EACfC,kBAAmB,EACnBC,MAAM,EACNC,QAAS,IAgEbX,EAAeQ,cAAgBQ,EAAcC,OAAOyB,OACpD1C,EAAeS,kBAAoBT,EAAeQ,cAClDR,EAAeC,eAAgB,EAC/B,IAAK,IAAI+D,EAAI,EAAGA,EAAIhE,EAAeQ,gBAAiBwD,EAChDhE,EAAeG,IAAIiC,KAAK,IACxBpC,EAAeI,KAAK4D,GAAKA,EACzBhE,EAAeK,KAAK2D,GAAK,EAGK,IAA9BhD,EAAcG,eACdnB,EAAeW,QAAUiC,KAAK0D,MAAMtF,EAAcG,eACtD,cAAmBnB,EAAeW,WAAlC,kBAAS4F,EAAT,QACIrB,EAAoBlF,EAAgBuG,EAAO,GAAIA,EAAO,IAG1D,OAFAxC,EAAW/D,GACXmF,EAAcnF,GACPA,EC/FoBwG,CAAqBH,IACxC1E,QAAQc,IAAI,2BAuCZ,QAECzC,EAAeC,eACZ,2BACI,oCAAYD,EAAeQ,eAC3B,wCAAgBR,EAAeS,mBAC/B,gDAAwBT,EAAeW,QAAQ+B,SAC7C1C,EAAeU,MACb,2BACI,0BAAQ0F,QA5ChC,WACIX,GAAmB,SAACzF,GAChB,IAAIyG,ED+FT,SAAyBzG,GAE5B,OADA+E,EAAW/E,EAAgBA,EAAeM,SAAUN,EAAeO,WAC5DR,EAAoBC,GCjGM0G,CAAgB1G,GAIzC,OAHAwF,GAAkB,SAACxE,GACf,OAAO2B,EAAqB3B,EAAeyF,MAExCA,OAsCS,gBACA,0BAAQL,QApChC,WACIX,GAAmB,SAACzF,GAChB,IAAIyG,EDkFT,SAAyBzG,GAE5B,OADAmF,EAAcnF,GACPD,EAAoBC,GCpFM2G,CAAgB3G,GAIzC,OAHAwF,GAAkB,SAACxE,GACf,OAAO2B,EAAqB3B,EAAeyF,MAExCA,OA8BS,iBACA,0BAAQL,QA5BhC,WACIX,GAAmB,SAACzF,GAChB,IAAIyG,EDiFT,SAA0BzG,GAE7B,OADA+E,EAAW/E,EAAgBA,EAAeO,UAAWP,EAAeM,UAC7DP,EAAoBC,GCnFM4G,CAAiB5G,GAI1C,OAHAwF,GAAkB,SAACxE,GACf,OAAO2B,EAAqB3B,EAAeyF,MAExCA,OAsBS,iBACA,uBAAKI,UAAWC,EAAAA,OACZ,uBAAKD,UAAWC,GACZ,2BAAK,sCDmElC,SAAwB9F,EAA6BhB,GACxD,KAAIA,EAAeM,UAAYU,EAAcC,OAAOyB,QAEpD,OAAO1B,EAAcC,OAAOjB,EAAeM,UCrENyG,CAAe/F,EAAehB,UAD9B,aACA,EAA+CsC,QAGxD,uBAAKuE,UAAWC,GACZ,2BAAK,sCDmElC,SAAyB9F,EAA6BhB,GACzD,KAAIA,EAAeO,WAAaS,EAAcC,OAAOyB,QAErD,OAAO1B,EAAcC,OAAOjB,EAAeO,WCrENyG,CAAgBhG,EAAehB,UAD/B,aACA,EAAgDsC,UAMrE,6CACA,2BAAK,4BD4ClB,SAA2BtB,EAA6BhB,GAE3D,IADA,IACA,EADIiH,EAAc,GAClB,IAAgBjH,EAAeE,gBAA/B,aAA6C,CAAC,IAArCgH,EAAoC,QACrCC,EAAQnG,EAAcC,OAAOiG,GACjCD,GAAG,OAAWE,EAAM9E,OAAjB,UAAoC8E,EAAM7E,KAA1C,MAAoD6E,EAAM5E,OAA1D,UAA6E4E,EAAM3E,SAAnF,KAEP,OAAOyE,ECjDcG,CAAkBpG,EAAehB","sources":["webpack://quote_rater/./src/styles/home.module.scss","webpack://quote_rater/./src/utils/quotes.ts","webpack://quote_rater/./src/pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var card = \"home-module--card--f-c4b\";","const quote_regex = /### +(.*)\\n```\\n((?:.|\\n)*?)\\nâ€”(.*)\\n```\\n((?:- +.+\\n)*)/gm;\n\nexport type Quote = {\n    origin: string;\n    text: string;\n    author: string;\n    comments: string;\n};\n\n// better index, worse index\nexport type Answer = number[];\n\n// React doesn't support mutable objects...JavaScript doesn't allow constructor overloading...RAAI through the drain...this hurts\nexport type LoadedQuotes = {\n    quotes: Quote[];\n    url: string;\n    answers_json: string;\n    quotes_url_input: HTMLInputElement | null;\n    answers_json_input: HTMLInputElement | null;\n};\nexport function get_loaded_quotes(): LoadedQuotes {\n    return {\n        quotes: [],\n        url: \"\",\n        answers_json: \"\",\n        quotes_url_input: null,\n        answers_json_input: null,\n    };\n}\nfunction copy_loaded_quotes(loaded_quotes: LoadedQuotes): LoadedQuotes {\n    return {\n        quotes: loaded_quotes.quotes,\n        url: loaded_quotes.url,\n        answers_json: loaded_quotes.answers_json,\n        quotes_url_input: loaded_quotes.quotes_url_input,\n        answers_json_input: loaded_quotes.answers_json_input,\n    }\n}\n\nexport type QuotesHandler = {\n    should_render: boolean;\n    quotes_order: number[];\n    adj: number[][];\n    link: number[];\n    size: number[];\n    left_idx: number;\n    right_idx: number;\n    quotes_amount: number,\n    components_amount: number;\n    done: boolean;\n    answers: Answer[];\n};\nexport function get_quotes_handler(): QuotesHandler {\n    return {\n        should_render: false,\n        quotes_order: [],\n        adj: [],\n        link: [],\n        size: [],\n        left_idx: -1,\n        right_idx: -1,\n        quotes_amount: 0,\n        components_amount: 0,\n        done: false,\n        answers: [],\n    };\n}\nfunction copy_quotes_handler(quotes_handler: QuotesHandler): QuotesHandler {\n    return {\n        should_render: quotes_handler.should_render,\n        quotes_order: quotes_handler.quotes_order,\n        adj: quotes_handler.adj,\n        link: quotes_handler.link,\n        size: quotes_handler.size,\n        left_idx: quotes_handler.left_idx,\n        right_idx: quotes_handler.right_idx,\n        quotes_amount: quotes_handler.quotes_amount,\n        components_amount: quotes_handler.components_amount,\n        done: quotes_handler.done,\n        answers: quotes_handler.answers,\n    };\n}\n\n// download quotes\nexport function setup_loaded_quotes(quotes_url_input: HTMLInputElement, answers_json_input: HTMLInputElement, callback: { (loaded_quotes: LoadedQuotes): void } = () => { }): void {\n    let loaded_quotes = get_loaded_quotes();\n    loaded_quotes.quotes_url_input = quotes_url_input;\n    loaded_quotes.answers_json_input = answers_json_input;\n    loaded_quotes.url = quotes_url_input.value;\n    loaded_quotes.answers_json = answers_json_input.value;\n    update_url_search_params(loaded_quotes);\n\n    download_file(loaded_quotes.url, (response) => {\n        let match;\n        while (match = quote_regex.exec(response)) {\n            loaded_quotes.quotes.push({ origin: match[1], text: match[2], author: match[3], comments: match[4] });\n        }\n        console.log(`parsed ${loaded_quotes.quotes.length} quotes`);\n        callback(loaded_quotes);\n    });\n}\n\nexport function update_loaded_quotes(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): LoadedQuotes {\n    loaded_quotes.answers_json = JSON.stringify(quotes_handler.answers);\n    update_url_search_params(loaded_quotes);\n    update_input_values(loaded_quotes);\n    return copy_loaded_quotes(loaded_quotes);\n}\n\nfunction update_url_search_params(loaded_quotes: LoadedQuotes): void {\n    let url_search_params = new URLSearchParams(location.search);\n\n    url_search_params.set(\"quotes_url\", loaded_quotes.url);\n    url_search_params.set(\"answers_json\", loaded_quotes.answers_json);\n\n    window.history.replaceState({}, \"\", `${location.pathname}?${url_search_params.toString()}`);\n}\n\nfunction update_input_values(loaded_quotes: LoadedQuotes): void {\n    if (loaded_quotes.answers_json_input != null)\n        loaded_quotes.answers_json_input.value = loaded_quotes.answers_json;\n    if (loaded_quotes.quotes_url_input != null)\n        loaded_quotes.quotes_url_input.value = loaded_quotes.url;\n}\n\n// initiate graph algorithms\nexport function setup_quotes_handler(loaded_quotes: LoadedQuotes): QuotesHandler {\n    let quotes_handler = get_quotes_handler();\n    quotes_handler.quotes_amount = loaded_quotes.quotes.length;\n    quotes_handler.components_amount = quotes_handler.quotes_amount;\n    quotes_handler.should_render = true;\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i) {\n        quotes_handler.adj.push([]);\n        quotes_handler.link[i] = i;\n        quotes_handler.size[i] = 1;\n    }\n    // apply pre-programmed answers\n    if (loaded_quotes.answers_json != \"\")\n        quotes_handler.answers = JSON.parse(loaded_quotes.answers_json);\n    for (let answer of quotes_handler.answers)\n        set_answer_headless(quotes_handler, answer[0], answer[1]);\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    return quotes_handler;\n}\n\nexport function update_question(quotes_handler: QuotesHandler): QuotesHandler {\n    next_question(quotes_handler);\n    return copy_quotes_handler(quotes_handler);\n}\nexport function set_left_better(quotes_handler: QuotesHandler): QuotesHandler {\n    set_answer(quotes_handler, quotes_handler.left_idx, quotes_handler.right_idx);\n    return copy_quotes_handler(quotes_handler);\n}\nexport function set_right_better(quotes_handler: QuotesHandler): QuotesHandler {\n    set_answer(quotes_handler, quotes_handler.right_idx, quotes_handler.left_idx);\n    return copy_quotes_handler(quotes_handler);\n}\n\nexport function get_quotes_string(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): string {\n    let out: string = \"\";\n    for (let idx of quotes_handler.quotes_order) {\n        let quote = loaded_quotes.quotes[idx];\n        out += `### ${quote.origin}\\n\\`\\`\\`\\n${quote.text}\\nâ€”${quote.author}\\n\\`\\`\\`\\n${quote.comments}\\n`;\n    }\n    return out;\n}\n\n// bounds checking required because of React fuckery\nexport function get_left_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote | undefined {\n    if (quotes_handler.left_idx >= loaded_quotes.quotes.length)\n        return undefined;\n    return loaded_quotes.quotes[quotes_handler.left_idx];\n}\nexport function get_right_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote | undefined {\n    if (quotes_handler.right_idx >= loaded_quotes.quotes.length)\n        return undefined;\n    return loaded_quotes.quotes[quotes_handler.right_idx];\n}\n\nfunction download_file(url: string, callback: { (response: string): void }): void {\n    let request = new XMLHttpRequest();\n    request.onload = () => {\n        if (request.status == 200)\n            callback(request.responseText);\n        else {\n            console.error(`Failed to load '${url}' with status ${request.status}`);\n        }\n    };\n    request.onerror = () => {\n        console.error(`Failed to load '${url}'`);\n    };\n    request.open(\"GET\", url, true);\n    request.send();\n}\n\n// union-find structure\nfunction find(quotes_handler: QuotesHandler, x: number): number {\n    while (x != quotes_handler.link[x])\n        x = quotes_handler.link[x];\n    return x;\n}\nfunction same(quotes_handler: QuotesHandler, a: number, b: number): boolean {\n    return find(quotes_handler, a) == find(quotes_handler, b);\n}\nfunction unite(quotes_handler: QuotesHandler, a: number, b: number): void {\n    a = find(quotes_handler, a);\n    b = find(quotes_handler, b);\n    // in same component\n    if (a == b)\n        return;\n    if (quotes_handler.size[a] < quotes_handler.size[b])\n        [a, b] = [b, a];\n    quotes_handler.size[a] += quotes_handler.size[b];\n    quotes_handler.link[b] = a;\n    --quotes_handler.components_amount;\n}\n\n// ordering algorithms\nfunction calc_order(quotes_handler: QuotesHandler): void {\n    quotes_handler.quotes_order = [];\n    let status: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        status.push(0);\n    // reverse <- more convenient\n    for (let i = quotes_handler.quotes_amount - 1; i >= 0; --i)\n        top_sort(quotes_handler, i, status);\n    quotes_handler.quotes_order.reverse();\n}\nfunction top_sort(quotes_handler: QuotesHandler, cur: number, status: number[]): void {\n    if (status[cur] == 2)\n        return;\n    // ignore cycles\n    if (status[cur] == 1) {\n        console.log(\"cycle detected\");\n        return;\n    }\n    status[cur] = 1;\n\n    for (let next of quotes_handler.adj[cur])\n        top_sort(quotes_handler, next, status);\n\n    quotes_handler.quotes_order.push(cur);\n    status[cur] = 2;\n}\n\n// find optimal next question\nfunction get_unconnected(quotes_handler: QuotesHandler, start: number): number {\n    // get all from start reachable nodes\n    let visited: boolean[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        visited.push(false);\n    top_search(quotes_handler, start, visited, -1);\n    // get all unreachables and randomize\n    let unreachables: number[] = [];\n    for (let i = 0; i < visited.length; ++i)\n        if (!visited[i])\n            unreachables.push(i);\n    unreachables.sort(() => Math.random() - 0.5);\n    // return nodes from which start can't be reached\n    for (let unreachable of unreachables)\n        if (!is_connected(quotes_handler, unreachable, start))\n            return unreachable;\n    return -1;\n}\n// can target be reached from start?\nfunction is_connected(quotes_handler: QuotesHandler, start: number, target: number): boolean {\n    let visited: boolean[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        visited.push(false);\n    return top_search(quotes_handler, start, visited, target);\n}\nfunction top_search(quotes_handler: QuotesHandler, cur: number, visited: boolean[], target: number): boolean {\n    if (cur == target)\n        return true;\n    if (visited[cur])\n        return false;\n    visited[cur] = true;\n\n    for (let next of quotes_handler.adj[cur])\n        if (top_search(quotes_handler, next, visited, target))\n            return true;\n    return false;\n}\n\n// set answer, log and get next question\nfunction set_answer(quotes_handler: QuotesHandler, better: number, worse: number): void {\n    set_answer_headless(quotes_handler, better, worse);\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    quotes_handler.answers.push([better, worse]);\n}\nfunction set_answer_headless(quotes_handler: QuotesHandler, better: number, worse: number): void {\n    console.log(`${better} better than ${worse}`);\n    quotes_handler.adj[better].push(worse);\n    unite(quotes_handler, better, worse);\n}\n\nfunction next_question(quotes_handler: QuotesHandler): void {\n    // get random ordering\n    let quotes_idxs: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        quotes_idxs.push(i);\n    quotes_idxs.sort(() => Math.random() - 0.5);\n\n    // in beginning, when multiple components exist, only connect components\n    if (quotes_handler.components_amount > 1) {\n        for (let left_idx of quotes_idxs) {\n            for (let right_idx of quotes_idxs) {\n                if (!same(quotes_handler, left_idx, right_idx)) {\n                    quotes_handler.left_idx = left_idx;\n                    quotes_handler.right_idx = right_idx;\n                    return;\n                }\n            }\n        }\n    }\n    // else get unconnected quotes <- the system can't tell which one's better\n    else {\n        for (let left_idx of quotes_idxs) {\n            let right_idx = get_unconnected(quotes_handler, left_idx);\n            if (right_idx != -1) {\n                quotes_handler.left_idx = left_idx;\n                quotes_handler.right_idx = right_idx;\n                return;\n            }\n        }\n    }\n    console.log(\"no more info required\");\n    quotes_handler.done = true;\n    // have a nice day\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport Layout from \"src/components/layout\";\nimport * as styles from \"src/styles/home.module.scss\";\nimport Heading from \"src/components/heading\";\nimport {\n    LoadedQuotes,\n    QuotesHandler,\n    get_loaded_quotes,\n    get_quotes_handler,\n    setup_loaded_quotes,\n    setup_quotes_handler,\n    update_loaded_quotes,\n    get_left_quote,\n    get_right_quote,\n    get_quotes_string,\n    update_question,\n    set_left_better,\n    set_right_better,\n} from \"src/utils/quotes\";\n\nconst Home: React.FC = (props) => {\n    let [loaded_quotes, set_loaded_quotes] = useState<LoadedQuotes>(get_loaded_quotes());\n    let [quotes_handler, set_quotes_handler] = useState<QuotesHandler>(get_quotes_handler());\n\n    // run for each refresh\n    useEffect(() => {\n        // load input values from url\n        let url_search_params = new URLSearchParams(location.search);\n\n        let quotes_url_raw = url_search_params.get(\"quotes_url\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLInputElement;\n        if (quotes_url_input.value == \"\")\n            quotes_url_input.value = quotes_url_raw ? quotes_url_raw : \"\";\n\n        let answers_json_raw = url_search_params.get(\"answers_json\");\n        let answers_json_input = document.getElementById(\"answers_json_input\") as HTMLInputElement;\n        if (answers_json_input.value == \"\")\n            answers_json_input.value = answers_json_raw ? answers_json_raw : \"[]\";\n    });\n\n    function load() {\n        console.log(\"loading quotes: ...\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLInputElement;\n        let answers_json_input = document.getElementById(\"answers_json_input\") as HTMLInputElement;\n\n        setup_loaded_quotes(quotes_url_input, answers_json_input, (new_loaded_quotes) => {\n            set_loaded_quotes(new_loaded_quotes);\n            set_quotes_handler(setup_quotes_handler(new_loaded_quotes));\n            console.log(\"loading quotes: ok\")\n        });\n    }\n\n    function left_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            let new_quotes_handler = set_left_better(quotes_handler);\n            set_loaded_quotes((loaded_quotes) => {\n                return update_loaded_quotes(loaded_quotes, new_quotes_handler);\n            });\n            return new_quotes_handler;\n        });\n    }\n    function equal_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            let new_quotes_handler = update_question(quotes_handler);\n            set_loaded_quotes((loaded_quotes) => {\n                return update_loaded_quotes(loaded_quotes, new_quotes_handler);\n            });\n            return new_quotes_handler;\n        });\n    }\n    function right_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            let new_quotes_handler = set_right_better(quotes_handler);\n            set_loaded_quotes((loaded_quotes) => {\n                return update_loaded_quotes(loaded_quotes, new_quotes_handler);\n            });\n            return new_quotes_handler;\n        });\n    }\n\n    return (\n        <Layout>\n            <Heading heading=\"Quote Rater\" />\n            <label htmlFor=\"quotes_url_input\">Input Quotes URL: </label>\n            <input id=\"quotes_url_input\" type=\"text\"></input><br />\n            <label htmlFor=\"answers_json_input\">Input Answered JSON: </label>\n            <input id=\"answers_json_input\" type=\"text\"></input><br />\n            <button onClick={load}>Load</button>\n\n            {quotes_handler.should_render && (\n                <div>\n                    <p>quotes: {quotes_handler.quotes_amount}</p>\n                    <p>components: {quotes_handler.components_amount}</p>\n                    <p>answered questions: {quotes_handler.answers.length}</p>\n                    {!quotes_handler.done &&\n                        <div>\n                            <button onClick={left_button_callback}>First Better</button>\n                            <button onClick={equal_button_callback}>Roughly Equal</button>\n                            <button onClick={right_button_callback}>Second Better</button>\n                            <div className={styles.cards}>\n                                <div className={styles.card}>\n                                    <pre><code>\n                                        {get_left_quote(loaded_quotes, quotes_handler)?.text}\n                                    </code></pre>\n                                </div>\n                                <div className={styles.card}>\n                                    <pre><code>\n                                        {get_right_quote(loaded_quotes, quotes_handler)?.text}\n                                    </code></pre>\n                                </div>\n                            </div>\n                        </div>\n                    }\n                    <h1>Ordered Quotes:</h1>\n                    <pre><code>\n                        {get_quotes_string(loaded_quotes, quotes_handler)}\n                    </code></pre>\n                </div>\n            )}\n        </Layout >\n    );\n};\nexport default Home;\n"],"names":["card","quote_regex","copy_quotes_handler","quotes_handler","should_render","quotes_order","adj","link","size","left_idx","right_idx","quotes_amount","components_amount","done","answers","setup_loaded_quotes","quotes_url_input","answers_json_input","callback","loaded_quotes","quotes","url","answers_json","value","update_url_search_params","request","XMLHttpRequest","onload","status","responseText","console","error","onerror","open","send","download_file","response","match","exec","push","origin","text","author","comments","log","length","update_loaded_quotes","JSON","stringify","update_input_values","copy_loaded_quotes","url_search_params","URLSearchParams","location","search","set","window","history","replaceState","pathname","toString","find","x","same","a","b","calc_order","i","top_sort","reverse","cur","get_unconnected","start","visited","top_search","unreachables","sort","Math","random","unreachable","is_connected","target","set_answer","better","worse","set_answer_headless","next_question","unite","quotes_idxs","props","useState","set_loaded_quotes","set_quotes_handler","useEffect","quotes_url_raw","get","document","getElementById","answers_json_raw","heading","htmlFor","id","type","onClick","new_loaded_quotes","parse","answer","setup_quotes_handler","new_quotes_handler","set_left_better","update_question","set_right_better","className","styles","get_left_quote","get_right_quote","out","idx","quote","get_quotes_string"],"sourceRoot":""}