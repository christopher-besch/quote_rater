{"version":3,"file":"component---src-pages-index-tsx-238506d0b3f1ccb639aa.js","mappings":"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","sources":["webpack://quote_rater/./src/styles/home.module.scss","webpack://quote_rater/./src/utils/quotes.ts","webpack://quote_rater/./src/pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var card = \"home-module--card--f-c4b\";\nexport var cards = \"home-module--cards--s7NCE\";","const quote_regex = /### +(.*)\\n```\\n((?:.|\\n)*?)\\n—(.*)\\n```\\n((?:- +.+\\n)*)/gm;\n\nexport type Quote = {\n    origin: string;\n    text: string;\n    author: string;\n    comments: string;\n};\n\n// React doesn't support mutable objects...JavaScript doesn't allow constructor overloading...RAAI through the drain...this hurts\nexport type LoadedQuotes = {\n    quotes: Quote[];\n    url: string;\n};\nexport function get_loaded_quotes(): LoadedQuotes {\n    return {\n        quotes: [],\n        url: \"\",\n    };\n}\nfunction copy_loaded_quotes(loaded_quotes: LoadedQuotes): LoadedQuotes {\n    return {\n        quotes: loaded_quotes.quotes,\n        url: loaded_quotes.url,\n    }\n}\n\nexport type QuotesHandler = {\n    should_render: boolean;\n    quotes_order: number[];\n    adj: number[][];\n    link: number[];\n    size: number[];\n    left_idx: number;\n    right_idx: number;\n    quotes_amount: number,\n    components_amount: number;\n};\nexport function get_quotes_handler(): QuotesHandler {\n    return {\n        should_render: false,\n        quotes_order: [],\n        adj: [],\n        link: [],\n        size: [],\n        left_idx: -1,\n        right_idx: -1,\n        quotes_amount: 0,\n        components_amount: 0,\n    };\n}\nfunction copy_quotes_handler(quotes_handler: QuotesHandler): QuotesHandler {\n    return {\n        should_render: quotes_handler.should_render,\n        quotes_order: quotes_handler.quotes_order,\n        adj: quotes_handler.adj,\n        link: quotes_handler.link,\n        size: quotes_handler.size,\n        left_idx: quotes_handler.left_idx,\n        right_idx: quotes_handler.right_idx,\n        quotes_amount: quotes_handler.quotes_amount,\n        components_amount: quotes_handler.components_amount,\n    };\n}\n\nexport function setup_loaded_quotes(loaded_quotes: LoadedQuotes, url: string = \"\", callback: { (loaded_quotes: LoadedQuotes): void } = () => { }): void {\n    loaded_quotes.url = url;\n    dwn(url, (response) => {\n        let match;\n        while (match = quote_regex.exec(response)) {\n            loaded_quotes.quotes.push({ origin: match[1], text: match[2], author: match[3], comments: match[4] });\n        }\n        callback(copy_loaded_quotes(loaded_quotes));\n    });\n}\n\nexport function setup_quotes_handler(quotes_handler: QuotesHandler, loaded_quotes: LoadedQuotes): QuotesHandler {\n    quotes_handler.quotes_amount = loaded_quotes.quotes.length;\n    quotes_handler.should_render = true;\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i) {\n        quotes_handler.adj.push([]);\n        quotes_handler.link[i] = i;\n        quotes_handler.size[i] = 1;\n    }\n    quotes_handler.components_amount = quotes_handler.quotes_amount;\n    top_sort(quotes_handler);\n    return copy_quotes_handler(quotes_handler);\n}\n\nexport function next_question(quotes_handler: QuotesHandler): QuotesHandler {\n    // terribly inefficient, too bad\n    do {\n        quotes_handler.left_idx = Math.floor(Math.random() * quotes_handler.quotes_amount);\n        quotes_handler.right_idx = Math.floor(Math.random() * quotes_handler.quotes_amount);\n    } while (same(quotes_handler, quotes_handler.left_idx, quotes_handler.right_idx))\n    console.log(`using quotes ${quotes_handler.left_idx} and ${quotes_handler.right_idx}`);\n    return copy_quotes_handler(quotes_handler);\n}\n\nexport function get_quotes_string(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): string {\n    let out: string = \"\";\n    for (let idx of quotes_handler.quotes_order) {\n        let quote = loaded_quotes.quotes[idx];\n        out += `### ${quote.origin}\\n\\`\\`\\`\\n${quote.text}\\n—${quote.author}\\n\\`\\`\\`\\n${quote.comments}\\n`;\n    }\n    return out;\n}\n\nexport function get_left_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote {\n    return loaded_quotes.quotes[quotes_handler.left_idx];\n}\nexport function get_right_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote {\n    return loaded_quotes.quotes[quotes_handler.right_idx];\n}\n\nfunction dwn(url: string, callback: { (response: string): void }): void {\n    let request = new XMLHttpRequest();\n    request.onload = () => {\n        if (request.status == 200)\n            callback(request.responseText);\n        else {\n            console.error(`Failed to load '${url}' with status ${request.status}`);\n        }\n    };\n    request.onerror = () => {\n        console.error(`Failed to load '${url}'`);\n    };\n    request.open(\"GET\", url, true);\n    request.send();\n}\n\nfunction find(quotes_handler: QuotesHandler, x: number): number {\n    while (x != quotes_handler.link[x])\n        x = quotes_handler.link[x];\n    return x;\n}\nfunction same(quotes_handler: QuotesHandler, a: number, b: number): boolean {\n    return find(quotes_handler, a) == find(quotes_handler, b);\n}\n// don't use with nodes from same component\nfunction unite(quotes_handler: QuotesHandler, a: number, b: number): void {\n    a = find(quotes_handler, a);\n    b = find(quotes_handler, b);\n    if (quotes_handler.size[a] < quotes_handler.size[b])\n        [a, b] = [b, a];\n    quotes_handler.size[a] += quotes_handler.size[b];\n    quotes_handler.link[b] = a;\n    --quotes_handler.components_amount;\n}\n\nfunction top_sort(quotes_handler: QuotesHandler,): void {\n    quotes_handler.quotes_order = [];\n    let status: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        status.push(0);\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        top(quotes_handler, i, status);\n}\nfunction top(quotes_handler: QuotesHandler, cur: number, status: number[]) {\n    if (status[cur] == 2)\n        return;\n    status[cur] = 1;\n\n    for (let next of quotes_handler.adj[cur])\n        top(quotes_handler, next, status);\n\n    quotes_handler.quotes_order.push(cur);\n    status[cur] = 2;\n}\n\n","import React, { useState, useEffect } from \"react\";\n\nimport Layout from \"src/components/layout\";\nimport * as styles from \"src/styles/home.module.scss\";\nimport Heading from \"src/components/heading\";\nimport {\n    LoadedQuotes,\n    QuotesHandler,\n    get_loaded_quotes,\n    get_quotes_handler,\n    setup_loaded_quotes,\n    setup_quotes_handler,\n    next_question,\n    get_left_quote,\n    get_right_quote,\n    get_quotes_string\n} from \"src/utils/quotes\";\n\nconst Home: React.FC = (props) => {\n    let [loaded_quotes, set_loaded_quotes] = useState<LoadedQuotes>(get_loaded_quotes());\n    let [quotes_handler, set_quotes_handler] = useState<QuotesHandler>(get_quotes_handler());\n\n    // run for each refresh\n    useEffect(() => {\n        let url_search_params = new URLSearchParams(location.search);\n        let quotes_url_raw = url_search_params.get(\"quotes_url\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLButtonElement;\n        if (quotes_url_input.value == \"\")\n            quotes_url_input.value = quotes_url_raw ? quotes_url_raw : \"\";\n    });\n\n    function load() {\n        let url_search_params = new URLSearchParams(location.search);\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLButtonElement;\n        let quotes_url = quotes_url_input.value;\n        url_search_params.set(\"quotes_url\", quotes_url);\n        window.history.replaceState({}, \"\", `${location.pathname}?${url_search_params.toString()}`);\n\n        setup_loaded_quotes(loaded_quotes, quotes_url, (new_loaded_quotes) => {\n            set_loaded_quotes(new_loaded_quotes);\n            setup_quotes_handler(quotes_handler, new_loaded_quotes);\n            set_quotes_handler((quotes_handler) => {\n                return next_question(quotes_handler);\n            });\n        });\n    }\n\n    function left_better() {\n        set_quotes_handler((quotes_handler) => {\n            return next_question(quotes_handler);\n        });\n    }\n    function equal() {\n        set_quotes_handler((quotes_handler) => {\n            return next_question(quotes_handler);\n        });\n    }\n    function right_better() {\n        set_quotes_handler((quotes_handler) => {\n            return next_question(quotes_handler);\n        });\n    }\n\n    return (\n        <Layout>\n            <Heading heading=\"Quote Rater\" />\n            <label htmlFor=\"quotes_url_input\">Input Quotes URL: </label>\n            <input id=\"quotes_url_input\" type=\"text\"></input><br />\n            <button onClick={load}>Load</button>\n\n            {quotes_handler.should_render && (\n                <div>\n                    <p>quotes: {quotes_handler.quotes_amount}</p>\n                    <p>components: {quotes_handler.components_amount}</p>\n                    <div className={styles.cards}>\n                        <div className={styles.card}>\n                            <pre><code>\n                                {get_left_quote(loaded_quotes, quotes_handler).text}\n                            </code></pre>\n                        </div>\n                        <div className={styles.card}>\n                            <pre><code>\n                                {get_right_quote(loaded_quotes, quotes_handler).text}\n                            </code></pre>\n                        </div>\n                    </div>\n                    <button onClick={left_better}>Left Better</button>\n                    <button onClick={equal}>Roughly Equal</button>\n                    <button onClick={right_better}>Right Better</button>\n                    <h1>Ordered Quotes:</h1>\n                    <pre><code>\n                        {get_quotes_string(loaded_quotes, quotes_handler)}\n                    </code></pre>\n                </div>\n            )}\n        </Layout >\n    );\n};\nexport default Home;\n"],"names":["card","quote_regex","copy_quotes_handler","quotes_handler","should_render","quotes_order","adj","link","size","left_idx","right_idx","quotes_amount","components_amount","setup_loaded_quotes","loaded_quotes","url","callback","request","XMLHttpRequest","onload","status","responseText","console","error","onerror","open","send","dwn","response","match","exec","quotes","push","origin","text","author","comments","copy_loaded_quotes","setup_quotes_handler","length","i","top","top_sort","next_question","Math","floor","random","same","log","find","x","a","b","cur","props","useState","set_loaded_quotes","set_quotes_handler","useEffect","quotes_url_raw","URLSearchParams","location","search","get","quotes_url_input","document","getElementById","value","heading","htmlFor","id","type","onClick","url_search_params","quotes_url","set","window","history","replaceState","pathname","toString","new_loaded_quotes","className","styles","get_left_quote","get_right_quote","out","idx","quote","get_quotes_string"],"sourceRoot":""}