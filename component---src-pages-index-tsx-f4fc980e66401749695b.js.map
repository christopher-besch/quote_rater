{"version":3,"file":"component---src-pages-index-tsx-f4fc980e66401749695b.js","mappings":"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","sources":["webpack://quote_rater/./src/styles/home.module.scss","webpack://quote_rater/./src/utils/quotes.ts","webpack://quote_rater/./src/pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var card = \"home-module--card--f-c4b\";","import { join } from \"path/posix\";\n\nconst quote_regex = /### +(.*)\\n```\\n((?:.|\\n)*?)\\nâ€”(.*)\\n```\\n((?:- +.+\\n)*)/gm;\n\nexport type Quote = {\n    origin: string;\n    text: string;\n    author: string;\n    comments: string;\n};\n\n// React doesn't support mutable objects...JavaScript doesn't allow constructor overloading...RAAI through the drain...this hurts\nexport type LoadedQuotes = {\n    quotes: Quote[];\n    url: string;\n};\nexport function get_loaded_quotes(): LoadedQuotes {\n    return {\n        quotes: [],\n        url: \"\",\n    };\n}\nfunction copy_loaded_quotes(loaded_quotes: LoadedQuotes): LoadedQuotes {\n    return {\n        quotes: loaded_quotes.quotes,\n        url: loaded_quotes.url,\n    }\n}\n\nexport type QuotesHandler = {\n    should_render: boolean;\n    quotes_order: number[];\n    adj: number[][];\n    link: number[];\n    size: number[];\n    left_idx: number;\n    right_idx: number;\n    quotes_amount: number,\n    components_amount: number;\n    questions_amount: number;\n    done: boolean;\n};\nexport function get_quotes_handler(): QuotesHandler {\n    return {\n        should_render: false,\n        quotes_order: [],\n        adj: [],\n        link: [],\n        size: [],\n        left_idx: -1,\n        right_idx: -1,\n        quotes_amount: 0,\n        components_amount: 0,\n        questions_amount: 0,\n        done: false,\n    };\n}\nfunction copy_quotes_handler(quotes_handler: QuotesHandler): QuotesHandler {\n    return {\n        should_render: quotes_handler.should_render,\n        quotes_order: quotes_handler.quotes_order,\n        adj: quotes_handler.adj,\n        link: quotes_handler.link,\n        size: quotes_handler.size,\n        left_idx: quotes_handler.left_idx,\n        right_idx: quotes_handler.right_idx,\n        quotes_amount: quotes_handler.quotes_amount,\n        components_amount: quotes_handler.components_amount,\n        questions_amount: quotes_handler.questions_amount,\n        done: quotes_handler.done,\n    };\n}\n\nexport function setup_loaded_quotes(url: string = \"\", callback: { (loaded_quotes: LoadedQuotes): void } = () => { }): void {\n    let loaded_quotes = get_loaded_quotes();\n    loaded_quotes.url = url;\n    dwn(url, (response) => {\n        let match;\n        while (match = quote_regex.exec(response)) {\n            loaded_quotes.quotes.push({ origin: match[1], text: match[2], author: match[3], comments: match[4] });\n        }\n        callback(loaded_quotes);\n    });\n}\n\nexport function setup_quotes_handler(loaded_quotes: LoadedQuotes): QuotesHandler {\n    let quotes_handler = get_quotes_handler();\n    quotes_handler.quotes_amount = loaded_quotes.quotes.length;\n    quotes_handler.should_render = true;\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i) {\n        quotes_handler.adj.push([]);\n        quotes_handler.link[i] = i;\n        quotes_handler.size[i] = 1;\n    }\n    quotes_handler.components_amount = quotes_handler.quotes_amount;\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    return quotes_handler;\n}\n\nexport function update_question(quotes_handler: QuotesHandler): QuotesHandler {\n    next_question(quotes_handler);\n    return copy_quotes_handler(quotes_handler);\n}\nexport function set_left_better(quotes_handler: QuotesHandler): QuotesHandler {\n    console.log(`${quotes_handler.left_idx} better than ${quotes_handler.right_idx}`);\n    quotes_handler.adj[quotes_handler.left_idx].push(quotes_handler.right_idx);\n    unite(quotes_handler, quotes_handler.left_idx, quotes_handler.right_idx);\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    ++quotes_handler.questions_amount;\n    return copy_quotes_handler(quotes_handler);\n}\nexport function set_right_better(quotes_handler: QuotesHandler): QuotesHandler {\n    console.log(`${quotes_handler.right_idx} better than ${quotes_handler.left_idx}`);\n    quotes_handler.adj[quotes_handler.right_idx].push(quotes_handler.left_idx);\n    unite(quotes_handler, quotes_handler.left_idx, quotes_handler.right_idx);\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    ++quotes_handler.questions_amount;\n    return copy_quotes_handler(quotes_handler);\n}\n\nexport function get_quotes_string(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): string {\n    let out: string = \"\";\n    for (let idx of quotes_handler.quotes_order) {\n        let quote = loaded_quotes.quotes[idx];\n        out += `### ${quote.origin}\\n\\`\\`\\`\\n${quote.text}\\nâ€”${quote.author}\\n\\`\\`\\`\\n${quote.comments}\\n`;\n    }\n    return out;\n}\n\n// bounds checking required because of React fuckery\nexport function get_left_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote | undefined {\n    if (quotes_handler.left_idx >= loaded_quotes.quotes.length)\n        return undefined;\n    return loaded_quotes.quotes[quotes_handler.left_idx];\n}\nexport function get_right_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote | undefined {\n    if (quotes_handler.right_idx >= loaded_quotes.quotes.length)\n        return undefined;\n    return loaded_quotes.quotes[quotes_handler.right_idx];\n}\n\nfunction dwn(url: string, callback: { (response: string): void }): void {\n    let request = new XMLHttpRequest();\n    request.onload = () => {\n        if (request.status == 200)\n            callback(request.responseText);\n        else {\n            console.error(`Failed to load '${url}' with status ${request.status}`);\n        }\n    };\n    request.onerror = () => {\n        console.error(`Failed to load '${url}'`);\n    };\n    request.open(\"GET\", url, true);\n    request.send();\n}\n\nfunction find(quotes_handler: QuotesHandler, x: number): number {\n    while (x != quotes_handler.link[x])\n        x = quotes_handler.link[x];\n    return x;\n}\nfunction same(quotes_handler: QuotesHandler, a: number, b: number): boolean {\n    return find(quotes_handler, a) == find(quotes_handler, b);\n}\nfunction unite(quotes_handler: QuotesHandler, a: number, b: number): void {\n    a = find(quotes_handler, a);\n    b = find(quotes_handler, b);\n    // in same component\n    if (a == b)\n        return;\n    if (quotes_handler.size[a] < quotes_handler.size[b])\n        [a, b] = [b, a];\n    quotes_handler.size[a] += quotes_handler.size[b];\n    quotes_handler.link[b] = a;\n    --quotes_handler.components_amount;\n}\n\nfunction calc_order(quotes_handler: QuotesHandler): void {\n    quotes_handler.quotes_order = [];\n    let status: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        status.push(0);\n    // reverse <- more convenient\n    for (let i = quotes_handler.quotes_amount - 1; i >= 0; --i)\n        top_sort(quotes_handler, i, status);\n    quotes_handler.quotes_order.reverse();\n}\nfunction top_sort(quotes_handler: QuotesHandler, cur: number, status: number[]): void {\n    if (status[cur] == 2)\n        return;\n    // ignore cycles\n    if (status[cur] == 1) {\n        console.log(\"cycle detected\");\n        return;\n    }\n    status[cur] = 1;\n\n    for (let next of quotes_handler.adj[cur])\n        top_sort(quotes_handler, next, status);\n\n    quotes_handler.quotes_order.push(cur);\n    status[cur] = 2;\n}\n\nfunction get_unconnected(quotes_handler: QuotesHandler, start: number): number {\n    // get all from start reachable nodes\n    let visited: boolean[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        visited.push(false);\n    top_search(quotes_handler, start, visited, -1);\n    // get all unreachables and randomize\n    let unreachables: number[] = [];\n    for (let i = 0; i < visited.length; ++i)\n        if (!visited[i])\n            unreachables.push(i);\n    unreachables.sort(() => Math.random() - 0.5);\n    // return nodes from which start can't be reached\n    for (let unreachable of unreachables)\n        if (!is_connected(quotes_handler, unreachable, start))\n            return unreachable;\n    return -1;\n}\nfunction is_connected(quotes_handler: QuotesHandler, start: number, target: number): boolean {\n    let visited: boolean[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        visited.push(false);\n    return top_search(quotes_handler, start, visited, target);\n}\nfunction top_search(quotes_handler: QuotesHandler, cur: number, visited: boolean[], target: number): boolean {\n    if (cur == target)\n        return true;\n    if (visited[cur])\n        return false;\n    visited[cur] = true;\n\n    for (let next of quotes_handler.adj[cur])\n        if (top_search(quotes_handler, next, visited, target))\n            return true;\n    return false;\n}\n\nfunction next_question(quotes_handler: QuotesHandler): void {\n    // get random ordering\n    let quotes_idxs: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        quotes_idxs.push(i);\n    quotes_idxs.sort(() => Math.random() - 0.5);\n\n    // in beginning, when multiple components exist, only connect components\n    if (quotes_handler.components_amount > 1) {\n        for (let left_idx of quotes_idxs) {\n            for (let right_idx of quotes_idxs) {\n                if (!same(quotes_handler, left_idx, right_idx)) {\n                    quotes_handler.left_idx = left_idx;\n                    quotes_handler.right_idx = right_idx;\n                    return;\n                }\n            }\n        }\n    }\n    // else get unconnected quotes, the system can't tell which one's better\n    else {\n        for (let left_idx of quotes_idxs) {\n            let right_idx = get_unconnected(quotes_handler, left_idx);\n            if (right_idx != -1) {\n                quotes_handler.left_idx = left_idx;\n                quotes_handler.right_idx = right_idx;\n                return;\n            }\n        }\n    }\n    console.log(\"no more info required\");\n    quotes_handler.done = true;\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport Layout from \"src/components/layout\";\nimport * as styles from \"src/styles/home.module.scss\";\nimport Heading from \"src/components/heading\";\nimport {\n    LoadedQuotes,\n    QuotesHandler,\n    get_loaded_quotes,\n    get_quotes_handler,\n    setup_loaded_quotes,\n    setup_quotes_handler,\n    get_left_quote,\n    get_right_quote,\n    get_quotes_string,\n    update_question,\n    set_left_better,\n    set_right_better,\n} from \"src/utils/quotes\";\n\nconst Home: React.FC = (props) => {\n    let [loaded_quotes, set_loaded_quotes] = useState<LoadedQuotes>(get_loaded_quotes());\n    let [quotes_handler, set_quotes_handler] = useState<QuotesHandler>(get_quotes_handler());\n\n    // run for each refresh\n    useEffect(() => {\n        let url_search_params = new URLSearchParams(location.search);\n        let quotes_url_raw = url_search_params.get(\"quotes_url\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLButtonElement;\n        if (quotes_url_input.value == \"\")\n            quotes_url_input.value = quotes_url_raw ? quotes_url_raw : \"\";\n    });\n\n    function load() {\n        let url_search_params = new URLSearchParams(location.search);\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLButtonElement;\n        let quotes_url = quotes_url_input.value;\n        url_search_params.set(\"quotes_url\", quotes_url);\n        window.history.replaceState({}, \"\", `${location.pathname}?${url_search_params.toString()}`);\n\n        console.log(\"loading quotes: ...\");\n        setup_loaded_quotes(quotes_url, (new_loaded_quotes) => {\n            set_loaded_quotes(new_loaded_quotes);\n            set_quotes_handler((quotes_handler) => {\n                return setup_quotes_handler(new_loaded_quotes);\n            });\n            console.log(\"loading quotes: ok\")\n        });\n    }\n\n    function left_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            return set_left_better(quotes_handler);\n        });\n    }\n    function equal_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            return update_question(quotes_handler);\n        });\n    }\n    function right_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            return set_right_better(quotes_handler);\n        });\n    }\n\n    return (\n        <Layout>\n            <Heading heading=\"Quote Rater\" />\n            <label htmlFor=\"quotes_url_input\">Input Quotes URL: </label>\n            <input id=\"quotes_url_input\" type=\"text\"></input><br />\n            <button onClick={load}>Load</button>\n\n            {quotes_handler.should_render && (\n                <div>\n                    <p>quotes: {quotes_handler.quotes_amount}</p>\n                    <p>components: {quotes_handler.components_amount}</p>\n                    <p>answered questions: {quotes_handler.questions_amount}</p>\n                    {!quotes_handler.done &&\n                        <div>\n                            <button onClick={left_button_callback}>First Better</button>\n                            <button onClick={equal_button_callback}>Roughly Equal</button>\n                            <button onClick={right_button_callback}>Second Better</button>\n                            <div className={styles.cards}>\n                                <div className={styles.card}>\n                                    <pre><code>\n                                        {get_left_quote(loaded_quotes, quotes_handler)?.text}\n                                    </code></pre>\n                                </div>\n                                <div className={styles.card}>\n                                    <pre><code>\n                                        {get_right_quote(loaded_quotes, quotes_handler)?.text}\n                                    </code></pre>\n                                </div>\n                            </div>\n                        </div>\n                    }\n                    <h1>Ordered Quotes:</h1>\n                    <pre><code>\n                        {get_quotes_string(loaded_quotes, quotes_handler)}\n                    </code></pre>\n                </div>\n            )}\n        </Layout >\n    );\n};\nexport default Home;\n"],"names":["card","quote_regex","copy_quotes_handler","quotes_handler","should_render","quotes_order","adj","link","size","left_idx","right_idx","quotes_amount","components_amount","questions_amount","done","setup_loaded_quotes","url","callback","loaded_quotes","quotes","request","XMLHttpRequest","onload","status","responseText","console","error","onerror","open","send","dwn","response","match","exec","push","origin","text","author","comments","find","x","same","a","b","unite","calc_order","i","top_sort","reverse","cur","log","get_unconnected","start","visited","top_search","unreachables","length","sort","Math","random","unreachable","is_connected","target","next_question","quotes_idxs","props","useState","set_loaded_quotes","set_quotes_handler","useEffect","quotes_url_raw","URLSearchParams","location","search","get","quotes_url_input","document","getElementById","value","heading","htmlFor","id","type","onClick","url_search_params","quotes_url","set","window","history","replaceState","pathname","toString","new_loaded_quotes","setup_quotes_handler","set_left_better","update_question","set_right_better","className","styles","get_left_quote","get_right_quote","out","idx","quote","get_quotes_string"],"sourceRoot":""}