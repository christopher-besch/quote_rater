{"version":3,"file":"component---src-pages-index-tsx-3d1c0ec3ae60f4779f66.js","mappings":"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","sources":["webpack://quote_rater/./src/styles/home.module.scss","webpack://quote_rater/./src/utils/quotes.ts","webpack://quote_rater/./src/pages/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var card = \"home-module--card--f-c4b\";","const quote_regex = /### +(.*)\\n```\\n((?:.|\\n)*?)\\nâ€”(.*)\\n```\\n((?:- +.+\\n)*)/gm;\n\nexport type Quote = {\n    origin: string;\n    text: string;\n    author: string;\n    comments: string;\n};\n\nexport type Answer = {\n    better: number;\n    worse: number;\n};\n\n// React doesn't support mutable objects...JavaScript doesn't allow constructor overloading...RAAI through the drain...this hurts\nexport type LoadedQuotes = {\n    quotes: Quote[];\n    url: string;\n    answers_json: string;\n    quotes_url_input: HTMLInputElement | null;\n    answers_json_input: HTMLInputElement | null;\n};\nexport function get_loaded_quotes(): LoadedQuotes {\n    return {\n        quotes: [],\n        url: \"\",\n        answers_json: \"\",\n        quotes_url_input: null,\n        answers_json_input: null,\n    };\n}\nfunction copy_loaded_quotes(loaded_quotes: LoadedQuotes): LoadedQuotes {\n    return {\n        quotes: loaded_quotes.quotes,\n        url: loaded_quotes.url,\n        answers_json: loaded_quotes.answers_json,\n        quotes_url_input: loaded_quotes.quotes_url_input,\n        answers_json_input: loaded_quotes.answers_json_input,\n    }\n}\n\nexport type QuotesHandler = {\n    should_render: boolean;\n    quotes_order: number[];\n    adj: number[][];\n    link: number[];\n    size: number[];\n    left_idx: number;\n    right_idx: number;\n    quotes_amount: number,\n    components_amount: number;\n    done: boolean;\n    answers: Answer[];\n};\nexport function get_quotes_handler(): QuotesHandler {\n    return {\n        should_render: false,\n        quotes_order: [],\n        adj: [],\n        link: [],\n        size: [],\n        left_idx: -1,\n        right_idx: -1,\n        quotes_amount: 0,\n        components_amount: 0,\n        done: false,\n        answers: [],\n    };\n}\nfunction copy_quotes_handler(quotes_handler: QuotesHandler): QuotesHandler {\n    return {\n        should_render: quotes_handler.should_render,\n        quotes_order: quotes_handler.quotes_order,\n        adj: quotes_handler.adj,\n        link: quotes_handler.link,\n        size: quotes_handler.size,\n        left_idx: quotes_handler.left_idx,\n        right_idx: quotes_handler.right_idx,\n        quotes_amount: quotes_handler.quotes_amount,\n        components_amount: quotes_handler.components_amount,\n        done: quotes_handler.done,\n        answers: quotes_handler.answers,\n    };\n}\n\nexport function setup_loaded_quotes(quotes_url_input: HTMLInputElement, answers_json_input: HTMLInputElement, callback: { (loaded_quotes: LoadedQuotes): void } = () => { }): void {\n    let loaded_quotes = get_loaded_quotes();\n    loaded_quotes.quotes_url_input = quotes_url_input;\n    loaded_quotes.answers_json_input = answers_json_input;\n    loaded_quotes.url = quotes_url_input.value;\n    loaded_quotes.answers_json = answers_json_input.value;\n    update_url_search_params(loaded_quotes);\n\n    dwn(loaded_quotes.url, (response) => {\n        let match;\n        while (match = quote_regex.exec(response)) {\n            loaded_quotes.quotes.push({ origin: match[1], text: match[2], author: match[3], comments: match[4] });\n        }\n        callback(loaded_quotes);\n    });\n}\n\nexport function setup_quotes_handler(loaded_quotes: LoadedQuotes): QuotesHandler {\n    let quotes_handler = get_quotes_handler();\n    quotes_handler.quotes_amount = loaded_quotes.quotes.length;\n    quotes_handler.should_render = true;\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i) {\n        quotes_handler.adj.push([]);\n        quotes_handler.link[i] = i;\n        quotes_handler.size[i] = 1;\n    }\n    quotes_handler.components_amount = quotes_handler.quotes_amount;\n    if (loaded_quotes.answers_json != \"\")\n        quotes_handler.answers = JSON.parse(loaded_quotes.answers_json);\n    for (let answer of quotes_handler.answers)\n        set_answer_headless(quotes_handler, answer.better, answer.worse);\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    return quotes_handler;\n}\n\nexport function update_loaded_quotes(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): LoadedQuotes {\n    loaded_quotes.answers_json = JSON.stringify(quotes_handler.answers);\n    update_url_search_params(loaded_quotes);\n    return copy_loaded_quotes(loaded_quotes);\n}\n\nfunction update_url_search_params(loaded_quotes: LoadedQuotes): void {\n    let url_search_params = new URLSearchParams(location.search);\n\n    url_search_params.set(\"quotes_url\", loaded_quotes.url);\n    url_search_params.set(\"answers_json\", loaded_quotes.answers_json);\n\n    window.history.replaceState({}, \"\", `${location.pathname}?${url_search_params.toString()}`);\n\n    if (loaded_quotes.answers_json_input != null)\n        loaded_quotes.answers_json_input.value = loaded_quotes.answers_json;\n    if (loaded_quotes.quotes_url_input != null)\n        loaded_quotes.quotes_url_input.value = loaded_quotes.url;\n}\n\nexport function update_question(quotes_handler: QuotesHandler): QuotesHandler {\n    next_question(quotes_handler);\n    return copy_quotes_handler(quotes_handler);\n}\nexport function set_left_better(quotes_handler: QuotesHandler): QuotesHandler {\n    set_answer(quotes_handler, quotes_handler.left_idx, quotes_handler.right_idx);\n    return copy_quotes_handler(quotes_handler);\n}\nexport function set_right_better(quotes_handler: QuotesHandler): QuotesHandler {\n    set_answer(quotes_handler, quotes_handler.right_idx, quotes_handler.left_idx);\n    return copy_quotes_handler(quotes_handler);\n}\n\nexport function get_quotes_string(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): string {\n    let out: string = \"\";\n    for (let idx of quotes_handler.quotes_order) {\n        let quote = loaded_quotes.quotes[idx];\n        out += `### ${quote.origin}\\n\\`\\`\\`\\n${quote.text}\\nâ€”${quote.author}\\n\\`\\`\\`\\n${quote.comments}\\n`;\n    }\n    return out;\n}\n\n// bounds checking required because of React fuckery\nexport function get_left_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote | undefined {\n    if (quotes_handler.left_idx >= loaded_quotes.quotes.length)\n        return undefined;\n    return loaded_quotes.quotes[quotes_handler.left_idx];\n}\nexport function get_right_quote(loaded_quotes: LoadedQuotes, quotes_handler: QuotesHandler): Quote | undefined {\n    if (quotes_handler.right_idx >= loaded_quotes.quotes.length)\n        return undefined;\n    return loaded_quotes.quotes[quotes_handler.right_idx];\n}\n\nfunction dwn(url: string, callback: { (response: string): void }): void {\n    let request = new XMLHttpRequest();\n    request.onload = () => {\n        if (request.status == 200)\n            callback(request.responseText);\n        else {\n            console.error(`Failed to load '${url}' with status ${request.status}`);\n        }\n    };\n    request.onerror = () => {\n        console.error(`Failed to load '${url}'`);\n    };\n    request.open(\"GET\", url, true);\n    request.send();\n}\n\nfunction find(quotes_handler: QuotesHandler, x: number): number {\n    while (x != quotes_handler.link[x])\n        x = quotes_handler.link[x];\n    return x;\n}\nfunction same(quotes_handler: QuotesHandler, a: number, b: number): boolean {\n    return find(quotes_handler, a) == find(quotes_handler, b);\n}\nfunction unite(quotes_handler: QuotesHandler, a: number, b: number): void {\n    a = find(quotes_handler, a);\n    b = find(quotes_handler, b);\n    // in same component\n    if (a == b)\n        return;\n    if (quotes_handler.size[a] < quotes_handler.size[b])\n        [a, b] = [b, a];\n    quotes_handler.size[a] += quotes_handler.size[b];\n    quotes_handler.link[b] = a;\n    --quotes_handler.components_amount;\n}\n\nfunction calc_order(quotes_handler: QuotesHandler): void {\n    quotes_handler.quotes_order = [];\n    let status: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        status.push(0);\n    // reverse <- more convenient\n    for (let i = quotes_handler.quotes_amount - 1; i >= 0; --i)\n        top_sort(quotes_handler, i, status);\n    quotes_handler.quotes_order.reverse();\n}\nfunction top_sort(quotes_handler: QuotesHandler, cur: number, status: number[]): void {\n    if (status[cur] == 2)\n        return;\n    // ignore cycles\n    if (status[cur] == 1) {\n        console.log(\"cycle detected\");\n        return;\n    }\n    status[cur] = 1;\n\n    for (let next of quotes_handler.adj[cur])\n        top_sort(quotes_handler, next, status);\n\n    quotes_handler.quotes_order.push(cur);\n    status[cur] = 2;\n}\n\nfunction get_unconnected(quotes_handler: QuotesHandler, start: number): number {\n    // get all from start reachable nodes\n    let visited: boolean[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        visited.push(false);\n    top_search(quotes_handler, start, visited, -1);\n    // get all unreachables and randomize\n    let unreachables: number[] = [];\n    for (let i = 0; i < visited.length; ++i)\n        if (!visited[i])\n            unreachables.push(i);\n    unreachables.sort(() => Math.random() - 0.5);\n    // return nodes from which start can't be reached\n    for (let unreachable of unreachables)\n        if (!is_connected(quotes_handler, unreachable, start))\n            return unreachable;\n    return -1;\n}\nfunction is_connected(quotes_handler: QuotesHandler, start: number, target: number): boolean {\n    let visited: boolean[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        visited.push(false);\n    return top_search(quotes_handler, start, visited, target);\n}\nfunction top_search(quotes_handler: QuotesHandler, cur: number, visited: boolean[], target: number): boolean {\n    if (cur == target)\n        return true;\n    if (visited[cur])\n        return false;\n    visited[cur] = true;\n\n    for (let next of quotes_handler.adj[cur])\n        if (top_search(quotes_handler, next, visited, target))\n            return true;\n    return false;\n}\n\nfunction set_answer(quotes_handler: QuotesHandler, better: number, worse: number): void {\n    set_answer_headless(quotes_handler, better, worse);\n    calc_order(quotes_handler);\n    next_question(quotes_handler);\n    quotes_handler.answers.push({ better, worse });\n}\nfunction set_answer_headless(quotes_handler: QuotesHandler, better: number, worse: number): void {\n    console.log(`${better} better than ${worse}`);\n    quotes_handler.adj[better].push(worse);\n    unite(quotes_handler, better, worse);\n}\n\nfunction next_question(quotes_handler: QuotesHandler): void {\n    // get random ordering\n    let quotes_idxs: number[] = [];\n    for (let i = 0; i < quotes_handler.quotes_amount; ++i)\n        quotes_idxs.push(i);\n    quotes_idxs.sort(() => Math.random() - 0.5);\n\n    // in beginning, when multiple components exist, only connect components\n    if (quotes_handler.components_amount > 1) {\n        for (let left_idx of quotes_idxs) {\n            for (let right_idx of quotes_idxs) {\n                if (!same(quotes_handler, left_idx, right_idx)) {\n                    quotes_handler.left_idx = left_idx;\n                    quotes_handler.right_idx = right_idx;\n                    return;\n                }\n            }\n        }\n    }\n    // else get unconnected quotes, the system can't tell which one's better\n    else {\n        for (let left_idx of quotes_idxs) {\n            let right_idx = get_unconnected(quotes_handler, left_idx);\n            if (right_idx != -1) {\n                quotes_handler.left_idx = left_idx;\n                quotes_handler.right_idx = right_idx;\n                return;\n            }\n        }\n    }\n    console.log(\"no more info required\");\n    quotes_handler.done = true;\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport Layout from \"src/components/layout\";\nimport * as styles from \"src/styles/home.module.scss\";\nimport Heading from \"src/components/heading\";\nimport {\n    LoadedQuotes,\n    QuotesHandler,\n    get_loaded_quotes,\n    get_quotes_handler,\n    setup_loaded_quotes,\n    setup_quotes_handler,\n    update_loaded_quotes,\n    get_left_quote,\n    get_right_quote,\n    get_quotes_string,\n    update_question,\n    set_left_better,\n    set_right_better,\n} from \"src/utils/quotes\";\n\nconst Home: React.FC = (props) => {\n    let [loaded_quotes, set_loaded_quotes] = useState<LoadedQuotes>(get_loaded_quotes());\n    let [quotes_handler, set_quotes_handler] = useState<QuotesHandler>(get_quotes_handler());\n\n    // run for each refresh\n    useEffect(() => {\n        // update input values\n        let url_search_params = new URLSearchParams(location.search);\n\n        let quotes_url_raw = url_search_params.get(\"quotes_url\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLInputElement;\n        if (quotes_url_input.value == \"\")\n            quotes_url_input.value = quotes_url_raw ? quotes_url_raw : \"\";\n\n        let answers_json_raw = url_search_params.get(\"answers_json\");\n        let answers_json_input = document.getElementById(\"answers_json_input\") as HTMLInputElement;\n        if (answers_json_input.value == \"\")\n            answers_json_input.value = answers_json_raw ? answers_json_raw : \"\";\n    });\n\n    function load() {\n        console.log(\"loading quotes: ...\");\n        let quotes_url_input = document.getElementById(\"quotes_url_input\") as HTMLInputElement;\n        let answers_json_input = document.getElementById(\"answers_json_input\") as HTMLInputElement;\n\n        setup_loaded_quotes(quotes_url_input, answers_json_input, (new_loaded_quotes) => {\n            set_loaded_quotes(new_loaded_quotes);\n            set_quotes_handler(setup_quotes_handler(new_loaded_quotes));\n            console.log(\"loading quotes: ok\")\n        });\n    }\n\n    function left_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            let new_quotes_handler = set_left_better(quotes_handler);\n            set_loaded_quotes((loaded_quotes) => {\n                return update_loaded_quotes(loaded_quotes, new_quotes_handler);\n            });\n            return new_quotes_handler\n        });\n    }\n    function equal_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            let new_quotes_handler = update_question(quotes_handler);\n            set_loaded_quotes((loaded_quotes) => {\n                return update_loaded_quotes(loaded_quotes, new_quotes_handler);\n            });\n            return new_quotes_handler\n        });\n    }\n    function right_button_callback() {\n        set_quotes_handler((quotes_handler) => {\n            let new_quotes_handler = set_right_better(quotes_handler);\n            set_loaded_quotes((loaded_quotes) => {\n                return update_loaded_quotes(loaded_quotes, new_quotes_handler);\n            });\n            return new_quotes_handler\n        });\n    }\n\n    return (\n        <Layout>\n            <Heading heading=\"Quote Rater\" />\n            <label htmlFor=\"quotes_url_input\">Input Quotes URL: </label>\n            <input id=\"quotes_url_input\" type=\"text\"></input><br />\n            <label htmlFor=\"answers_json_input\">Input Answered JSON: </label>\n            <input id=\"answers_json_input\" type=\"text\"></input><br />\n            <button onClick={load}>Load</button>\n\n            {quotes_handler.should_render && (\n                <div>\n                    <p>quotes: {quotes_handler.quotes_amount}</p>\n                    <p>components: {quotes_handler.components_amount}</p>\n                    <p>answered questions: {quotes_handler.answers.length}</p>\n                    {!quotes_handler.done &&\n                        <div>\n                            <button onClick={left_button_callback}>First Better</button>\n                            <button onClick={equal_button_callback}>Roughly Equal</button>\n                            <button onClick={right_button_callback}>Second Better</button>\n                            <div className={styles.cards}>\n                                <div className={styles.card}>\n                                    <pre><code>\n                                        {get_left_quote(loaded_quotes, quotes_handler)?.text}\n                                    </code></pre>\n                                </div>\n                                <div className={styles.card}>\n                                    <pre><code>\n                                        {get_right_quote(loaded_quotes, quotes_handler)?.text}\n                                    </code></pre>\n                                </div>\n                            </div>\n                        </div>\n                    }\n                    <h1>Ordered Quotes:</h1>\n                    <pre><code>\n                        {get_quotes_string(loaded_quotes, quotes_handler)}\n                    </code></pre>\n                </div>\n            )}\n        </Layout >\n    );\n};\nexport default Home;\n"],"names":["card","quote_regex","copy_quotes_handler","quotes_handler","should_render","quotes_order","adj","link","size","left_idx","right_idx","quotes_amount","components_amount","done","answers","setup_loaded_quotes","quotes_url_input","answers_json_input","callback","loaded_quotes","quotes","url","answers_json","value","update_url_search_params","request","XMLHttpRequest","onload","status","responseText","console","error","onerror","open","send","dwn","response","match","exec","push","origin","text","author","comments","update_loaded_quotes","JSON","stringify","copy_loaded_quotes","url_search_params","URLSearchParams","location","search","set","window","history","replaceState","pathname","toString","find","x","same","a","b","calc_order","i","top_sort","reverse","cur","log","get_unconnected","start","visited","top_search","unreachables","length","sort","Math","random","unreachable","is_connected","target","set_answer","better","worse","set_answer_headless","next_question","unite","quotes_idxs","props","useState","set_loaded_quotes","set_quotes_handler","useEffect","quotes_url_raw","get","document","getElementById","answers_json_raw","heading","htmlFor","id","type","onClick","new_loaded_quotes","parse","answer","setup_quotes_handler","new_quotes_handler","set_left_better","update_question","set_right_better","className","styles","get_left_quote","get_right_quote","out","idx","quote","get_quotes_string"],"sourceRoot":""}